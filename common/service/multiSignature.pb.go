// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service/multiSignature.proto

package service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	model "github.com/zoobc/zoobc-core/common/model"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("service/multiSignature.proto", fileDescriptor_c7c370ee2b80617f)
}

var fileDescriptor_c7c370ee2b80617f = []byte{
	// 308 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x29, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0xcf, 0x2d, 0xcd, 0x29, 0xc9, 0x0c, 0xce, 0x4c, 0xcf, 0x4b, 0x2c, 0x29,
	0x2d, 0x4a, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0xca, 0x4a, 0x49, 0xe5, 0xe6,
	0xa7, 0xa4, 0xe6, 0x60, 0x55, 0x24, 0x25, 0x93, 0x9e, 0x9f, 0x9f, 0x9e, 0x93, 0xaa, 0x9f, 0x58,
	0x90, 0xa9, 0x9f, 0x98, 0x97, 0x97, 0x5f, 0x92, 0x58, 0x92, 0x99, 0x9f, 0x57, 0x0c, 0x91, 0x35,
	0x5a, 0xc2, 0xc2, 0xc5, 0xef, 0x0b, 0xd2, 0x56, 0x9c, 0x99, 0x1e, 0x0c, 0x31, 0x4d, 0x68, 0x12,
	0x23, 0x97, 0x98, 0x7b, 0x6a, 0x49, 0x40, 0x6a, 0x5e, 0x4a, 0x66, 0x5e, 0x7a, 0x48, 0x51, 0x62,
	0x5e, 0x71, 0x62, 0x32, 0x58, 0x93, 0x90, 0x8a, 0x1e, 0xd8, 0x26, 0x3d, 0xec, 0xd2, 0x41, 0xa9,
	0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x52, 0xaa, 0x04, 0x54, 0x15, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x2a,
	0x69, 0x37, 0x5d, 0x7e, 0x32, 0x99, 0x49, 0x55, 0x48, 0x59, 0xbf, 0xcc, 0x10, 0xe2, 0xf6, 0xe2,
	0xcc, 0x74, 0x7d, 0x1c, 0x36, 0xbf, 0x62, 0xe4, 0xd2, 0xc1, 0x2a, 0xe5, 0x92, 0x5a, 0x92, 0x98,
	0x99, 0xe3, 0x54, 0x89, 0x24, 0xe4, 0x91, 0x58, 0x9c, 0x21, 0x64, 0x85, 0xcf, 0x11, 0x38, 0x34,
	0xc1, 0x3c, 0x60, 0x4d, 0x96, 0x5e, 0xa8, 0xb7, 0x1c, 0xc1, 0xde, 0xb2, 0x16, 0xb2, 0x24, 0xec,
	0x2d, 0x5c, 0x6e, 0xef, 0x63, 0xe4, 0x12, 0x75, 0x4f, 0x2d, 0x81, 0x45, 0x0c, 0x24, 0x3e, 0x3d,
	0xf3, 0xd2, 0xf2, 0x85, 0x94, 0x11, 0x2e, 0xc3, 0x94, 0x85, 0x39, 0x5f, 0x05, 0xbf, 0x22, 0xa8,
	0x3b, 0xb5, 0xc0, 0xee, 0x54, 0x11, 0x52, 0x42, 0x77, 0x27, 0xa6, 0x1e, 0x27, 0x9d, 0x28, 0xad,
	0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0xfd, 0xaa, 0xfc, 0xfc, 0xa4, 0x64,
	0x08, 0xa9, 0x9b, 0x9c, 0x5f, 0x94, 0xaa, 0x9f, 0x9c, 0x9f, 0x9b, 0x9b, 0x9f, 0xa7, 0x0f, 0x4d,
	0x8e, 0x49, 0x6c, 0xe0, 0xb4, 0x65, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x76, 0x64, 0xb9, 0xbd,
	0xbe, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MultisigServiceClient is the client API for MultisigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MultisigServiceClient interface {
	GetPendingTransactions(ctx context.Context, in *model.GetPendingTransactionsRequest, opts ...grpc.CallOption) (*model.GetPendingTransactionsResponse, error)
	GetPendingTransactionDetailByTransactionHash(ctx context.Context, in *model.GetPendingTransactionDetailByTransactionHashRequest, opts ...grpc.CallOption) (*model.GetPendingTransactionDetailByTransactionHashResponse, error)
	GetMultisignatureInfo(ctx context.Context, in *model.GetMultisignatureInfoRequest, opts ...grpc.CallOption) (*model.GetMultisignatureInfoResponse, error)
}

type multisigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMultisigServiceClient(cc grpc.ClientConnInterface) MultisigServiceClient {
	return &multisigServiceClient{cc}
}

func (c *multisigServiceClient) GetPendingTransactions(ctx context.Context, in *model.GetPendingTransactionsRequest, opts ...grpc.CallOption) (*model.GetPendingTransactionsResponse, error) {
	out := new(model.GetPendingTransactionsResponse)
	err := c.cc.Invoke(ctx, "/service.MultisigService/GetPendingTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multisigServiceClient) GetPendingTransactionDetailByTransactionHash(ctx context.Context, in *model.GetPendingTransactionDetailByTransactionHashRequest, opts ...grpc.CallOption) (*model.GetPendingTransactionDetailByTransactionHashResponse, error) {
	out := new(model.GetPendingTransactionDetailByTransactionHashResponse)
	err := c.cc.Invoke(ctx, "/service.MultisigService/GetPendingTransactionDetailByTransactionHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multisigServiceClient) GetMultisignatureInfo(ctx context.Context, in *model.GetMultisignatureInfoRequest, opts ...grpc.CallOption) (*model.GetMultisignatureInfoResponse, error) {
	out := new(model.GetMultisignatureInfoResponse)
	err := c.cc.Invoke(ctx, "/service.MultisigService/GetMultisignatureInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MultisigServiceServer is the server API for MultisigService service.
type MultisigServiceServer interface {
	GetPendingTransactions(context.Context, *model.GetPendingTransactionsRequest) (*model.GetPendingTransactionsResponse, error)
	GetPendingTransactionDetailByTransactionHash(context.Context, *model.GetPendingTransactionDetailByTransactionHashRequest) (*model.GetPendingTransactionDetailByTransactionHashResponse, error)
	GetMultisignatureInfo(context.Context, *model.GetMultisignatureInfoRequest) (*model.GetMultisignatureInfoResponse, error)
}

// UnimplementedMultisigServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMultisigServiceServer struct {
}

func (*UnimplementedMultisigServiceServer) GetPendingTransactions(ctx context.Context, req *model.GetPendingTransactionsRequest) (*model.GetPendingTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingTransactions not implemented")
}
func (*UnimplementedMultisigServiceServer) GetPendingTransactionDetailByTransactionHash(ctx context.Context, req *model.GetPendingTransactionDetailByTransactionHashRequest) (*model.GetPendingTransactionDetailByTransactionHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingTransactionDetailByTransactionHash not implemented")
}
func (*UnimplementedMultisigServiceServer) GetMultisignatureInfo(ctx context.Context, req *model.GetMultisignatureInfoRequest) (*model.GetMultisignatureInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultisignatureInfo not implemented")
}

func RegisterMultisigServiceServer(s *grpc.Server, srv MultisigServiceServer) {
	s.RegisterService(&_MultisigService_serviceDesc, srv)
}

func _MultisigService_GetPendingTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetPendingTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultisigServiceServer).GetPendingTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.MultisigService/GetPendingTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultisigServiceServer).GetPendingTransactions(ctx, req.(*model.GetPendingTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultisigService_GetPendingTransactionDetailByTransactionHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetPendingTransactionDetailByTransactionHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultisigServiceServer).GetPendingTransactionDetailByTransactionHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.MultisigService/GetPendingTransactionDetailByTransactionHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultisigServiceServer).GetPendingTransactionDetailByTransactionHash(ctx, req.(*model.GetPendingTransactionDetailByTransactionHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultisigService_GetMultisignatureInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetMultisignatureInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultisigServiceServer).GetMultisignatureInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.MultisigService/GetMultisignatureInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultisigServiceServer).GetMultisignatureInfo(ctx, req.(*model.GetMultisignatureInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MultisigService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.MultisigService",
	HandlerType: (*MultisigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPendingTransactions",
			Handler:    _MultisigService_GetPendingTransactions_Handler,
		},
		{
			MethodName: "GetPendingTransactionDetailByTransactionHash",
			Handler:    _MultisigService_GetPendingTransactionDetailByTransactionHash_Handler,
		},
		{
			MethodName: "GetMultisignatureInfo",
			Handler:    _MultisigService_GetMultisignatureInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/multiSignature.proto",
}
