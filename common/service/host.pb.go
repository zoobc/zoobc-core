// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service/host.proto

package service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	model "github.com/zoobc/zoobc-core/common/model"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("service/host.proto", fileDescriptor_fc2df5144b0d0a79)
}

var fileDescriptor_fc2df5144b0d0a79 = []byte{
	// 232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0xcf, 0xc8, 0x2f, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x87, 0x8a, 0x49, 0x09, 0xe6, 0xe6, 0xa7, 0xa4, 0xe6, 0xe8, 0xa7, 0xe6, 0x16, 0x94, 0x54, 0x42,
	0xe4, 0xa4, 0x04, 0x20, 0x42, 0x08, 0xd5, 0x52, 0x32, 0xe9, 0xf9, 0xf9, 0xe9, 0x39, 0xa9, 0xfa,
	0x89, 0x05, 0x99, 0xfa, 0x89, 0x79, 0x79, 0xf9, 0x25, 0x89, 0x25, 0x99, 0xf9, 0x79, 0xc5, 0x10,
	0x59, 0xa3, 0xcd, 0x8c, 0x5c, 0xdc, 0x1e, 0xf9, 0xc5, 0x25, 0xc1, 0x10, 0x23, 0x85, 0xbc, 0xb8,
	0xb8, 0xdd, 0x53, 0x4b, 0x40, 0x22, 0x9e, 0x79, 0x69, 0xf9, 0x42, 0x3c, 0x7a, 0x60, 0xf3, 0xf4,
	0x5c, 0x41, 0x56, 0x48, 0xf1, 0x43, 0x79, 0x30, 0x69, 0x25, 0x99, 0xa6, 0xcb, 0x4f, 0x26, 0x33,
	0x89, 0x09, 0x89, 0xe8, 0x97, 0x19, 0x82, 0xed, 0xd4, 0x47, 0xd6, 0x1c, 0xc1, 0xc5, 0x03, 0xe5,
	0x06, 0xa4, 0xa6, 0x16, 0x15, 0xa3, 0x19, 0x26, 0x0d, 0xe5, 0x21, 0x2b, 0x09, 0x4a, 0x2d, 0x2e,
	0xc8, 0xcf, 0x2b, 0x4e, 0x55, 0x92, 0x05, 0x1b, 0x2c, 0x2e, 0x24, 0x8a, 0x6e, 0x30, 0x58, 0x99,
	0x93, 0x4e, 0x94, 0x56, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x7e, 0x55,
	0x7e, 0x7e, 0x52, 0x32, 0x84, 0xd4, 0x4d, 0xce, 0x2f, 0x4a, 0xd5, 0x4f, 0xce, 0xcf, 0xcd, 0xcd,
	0xcf, 0xd3, 0x87, 0x06, 0x53, 0x12, 0x1b, 0xd8, 0xab, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x67, 0x67, 0x02, 0xa7, 0x4c, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HostServiceClient is the client API for HostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HostServiceClient interface {
	GetHostInfo(ctx context.Context, in *model.Empty, opts ...grpc.CallOption) (*model.HostInfo, error)
	GetHostPeers(ctx context.Context, in *model.Empty, opts ...grpc.CallOption) (*model.GetHostPeersResponse, error)
}

type hostServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHostServiceClient(cc grpc.ClientConnInterface) HostServiceClient {
	return &hostServiceClient{cc}
}

func (c *hostServiceClient) GetHostInfo(ctx context.Context, in *model.Empty, opts ...grpc.CallOption) (*model.HostInfo, error) {
	out := new(model.HostInfo)
	err := c.cc.Invoke(ctx, "/service.HostService/GetHostInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) GetHostPeers(ctx context.Context, in *model.Empty, opts ...grpc.CallOption) (*model.GetHostPeersResponse, error) {
	out := new(model.GetHostPeersResponse)
	err := c.cc.Invoke(ctx, "/service.HostService/GetHostPeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostServiceServer is the server API for HostService service.
type HostServiceServer interface {
	GetHostInfo(context.Context, *model.Empty) (*model.HostInfo, error)
	GetHostPeers(context.Context, *model.Empty) (*model.GetHostPeersResponse, error)
}

// UnimplementedHostServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHostServiceServer struct {
}

func (*UnimplementedHostServiceServer) GetHostInfo(ctx context.Context, req *model.Empty) (*model.HostInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostInfo not implemented")
}
func (*UnimplementedHostServiceServer) GetHostPeers(ctx context.Context, req *model.Empty) (*model.GetHostPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostPeers not implemented")
}

func RegisterHostServiceServer(s *grpc.Server, srv HostServiceServer) {
	s.RegisterService(&_HostService_serviceDesc, srv)
}

func _HostService_GetHostInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).GetHostInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.HostService/GetHostInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).GetHostInfo(ctx, req.(*model.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_GetHostPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).GetHostPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.HostService/GetHostPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).GetHostPeers(ctx, req.(*model.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _HostService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.HostService",
	HandlerType: (*HostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHostInfo",
			Handler:    _HostService_GetHostInfo_Handler,
		},
		{
			MethodName: "GetHostPeers",
			Handler:    _HostService_GetHostPeers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/host.proto",
}
