// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service/nodeHardware.proto

package service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	model "github.com/zoobc/zoobc-core/common/model"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("service/nodeHardware.proto", fileDescriptor_a9639805248a2100)
}

var fileDescriptor_a9639805248a2100 = []byte{
	// 243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2a, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0xcf, 0xcb, 0x4f, 0x49, 0xf5, 0x48, 0x2c, 0x4a, 0x29, 0x4f, 0x2c, 0x4a,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0xca, 0x49, 0x49, 0xe4, 0xe6, 0xa7, 0xa4,
	0xe6, 0x60, 0x51, 0x22, 0x25, 0x93, 0x9e, 0x9f, 0x9f, 0x9e, 0x93, 0xaa, 0x9f, 0x58, 0x90, 0xa9,
	0x9f, 0x98, 0x97, 0x97, 0x5f, 0x92, 0x58, 0x92, 0x99, 0x9f, 0x57, 0x0c, 0x95, 0x15, 0x84, 0xe8,
	0x4b, 0xcd, 0x2d, 0x28, 0xa9, 0x84, 0x08, 0x19, 0x9d, 0x63, 0xe4, 0x12, 0xf6, 0x43, 0x32, 0x27,
	0x18, 0x62, 0x85, 0x50, 0x18, 0x17, 0xbf, 0x7b, 0x6a, 0x09, 0xb2, 0x8c, 0x90, 0xac, 0x1e, 0x58,
	0xbb, 0x1e, 0x9a, 0x78, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x94, 0x1c, 0x2e, 0xe9, 0xe2,
	0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x25, 0x06, 0x0d, 0x46, 0x03, 0x46, 0xa1, 0x78, 0x2e, 0x6e, 0xa8,
	0x82, 0x90, 0xcc, 0xdc, 0x54, 0x21, 0x1e, 0xa8, 0x26, 0x57, 0x90, 0x93, 0xa4, 0xa4, 0x50, 0x8d,
	0x00, 0xa9, 0x80, 0x6b, 0x57, 0x6b, 0xba, 0xfc, 0x64, 0x32, 0x93, 0x82, 0x90, 0x9c, 0x7e, 0x99,
	0xa1, 0x7e, 0x46, 0x6a, 0x62, 0x4e, 0x49, 0x86, 0x3e, 0x16, 0x75, 0x4e, 0x3a, 0x51, 0x5a, 0xe9,
	0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0x55, 0xf9, 0xf9, 0x49, 0xc9, 0x10,
	0x52, 0x37, 0x39, 0xbf, 0x28, 0x55, 0x3f, 0x39, 0x3f, 0x37, 0x37, 0x3f, 0x4f, 0x1f, 0x1a, 0x92,
	0x49, 0x6c, 0xe0, 0x50, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xfa, 0x78, 0x18, 0x23, 0x77,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NodeHardwareServiceClient is the client API for NodeHardwareService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeHardwareServiceClient interface {
	GetNodeHardware(ctx context.Context, opts ...grpc.CallOption) (NodeHardwareService_GetNodeHardwareClient, error)
	// GetNodeTime return current UTC Time
	GetNodeTime(ctx context.Context, in *model.Empty, opts ...grpc.CallOption) (*model.GetNodeTimeResponse, error)
}

type nodeHardwareServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeHardwareServiceClient(cc grpc.ClientConnInterface) NodeHardwareServiceClient {
	return &nodeHardwareServiceClient{cc}
}

func (c *nodeHardwareServiceClient) GetNodeHardware(ctx context.Context, opts ...grpc.CallOption) (NodeHardwareService_GetNodeHardwareClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NodeHardwareService_serviceDesc.Streams[0], "/service.NodeHardwareService/GetNodeHardware", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeHardwareServiceGetNodeHardwareClient{stream}
	return x, nil
}

type NodeHardwareService_GetNodeHardwareClient interface {
	Send(*model.GetNodeHardwareRequest) error
	Recv() (*model.GetNodeHardwareResponse, error)
	grpc.ClientStream
}

type nodeHardwareServiceGetNodeHardwareClient struct {
	grpc.ClientStream
}

func (x *nodeHardwareServiceGetNodeHardwareClient) Send(m *model.GetNodeHardwareRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeHardwareServiceGetNodeHardwareClient) Recv() (*model.GetNodeHardwareResponse, error) {
	m := new(model.GetNodeHardwareResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeHardwareServiceClient) GetNodeTime(ctx context.Context, in *model.Empty, opts ...grpc.CallOption) (*model.GetNodeTimeResponse, error) {
	out := new(model.GetNodeTimeResponse)
	err := c.cc.Invoke(ctx, "/service.NodeHardwareService/GetNodeTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeHardwareServiceServer is the server API for NodeHardwareService service.
type NodeHardwareServiceServer interface {
	GetNodeHardware(NodeHardwareService_GetNodeHardwareServer) error
	// GetNodeTime return current UTC Time
	GetNodeTime(context.Context, *model.Empty) (*model.GetNodeTimeResponse, error)
}

// UnimplementedNodeHardwareServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNodeHardwareServiceServer struct {
}

func (*UnimplementedNodeHardwareServiceServer) GetNodeHardware(srv NodeHardwareService_GetNodeHardwareServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNodeHardware not implemented")
}
func (*UnimplementedNodeHardwareServiceServer) GetNodeTime(ctx context.Context, req *model.Empty) (*model.GetNodeTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeTime not implemented")
}

func RegisterNodeHardwareServiceServer(s *grpc.Server, srv NodeHardwareServiceServer) {
	s.RegisterService(&_NodeHardwareService_serviceDesc, srv)
}

func _NodeHardwareService_GetNodeHardware_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeHardwareServiceServer).GetNodeHardware(&nodeHardwareServiceGetNodeHardwareServer{stream})
}

type NodeHardwareService_GetNodeHardwareServer interface {
	Send(*model.GetNodeHardwareResponse) error
	Recv() (*model.GetNodeHardwareRequest, error)
	grpc.ServerStream
}

type nodeHardwareServiceGetNodeHardwareServer struct {
	grpc.ServerStream
}

func (x *nodeHardwareServiceGetNodeHardwareServer) Send(m *model.GetNodeHardwareResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeHardwareServiceGetNodeHardwareServer) Recv() (*model.GetNodeHardwareRequest, error) {
	m := new(model.GetNodeHardwareRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NodeHardwareService_GetNodeTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeHardwareServiceServer).GetNodeTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeHardwareService/GetNodeTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeHardwareServiceServer).GetNodeTime(ctx, req.(*model.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeHardwareService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.NodeHardwareService",
	HandlerType: (*NodeHardwareServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodeTime",
			Handler:    _NodeHardwareService_GetNodeTime_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetNodeHardware",
			Handler:       _NodeHardwareService_GetNodeHardware_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service/nodeHardware.proto",
}
