// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service/mempool.proto

package service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	model "github.com/zoobc/zoobc-core/common/model"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("service/mempool.proto", fileDescriptor_d6a0248fdacf4dd2)
}

var fileDescriptor_d6a0248fdacf4dd2 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0xcf, 0x4d, 0xcd, 0x2d, 0xc8, 0xcf, 0xcf, 0xd1, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x62, 0x87, 0x0a, 0x4b, 0x09, 0xe7, 0xe6, 0xa7, 0xa4, 0xe6, 0xa0, 0xca, 0x4a, 0xc9,
	0xa4, 0xe7, 0xe7, 0xa7, 0xe7, 0xa4, 0xea, 0x27, 0x16, 0x64, 0xea, 0x27, 0xe6, 0xe5, 0xe5, 0x97,
	0x24, 0x96, 0x64, 0xe6, 0xe7, 0x15, 0x43, 0x64, 0x8d, 0xb6, 0x30, 0x71, 0xf1, 0xf9, 0x42, 0xd4,
	0x07, 0x43, 0x4c, 0x11, 0x9a, 0xc8, 0xc8, 0x25, 0xe6, 0x9e, 0x5a, 0x02, 0x15, 0x0d, 0x29, 0x4a,
	0xcc, 0x2b, 0x4e, 0x4c, 0x06, 0xeb, 0x11, 0x52, 0xd1, 0x03, 0xdb, 0xa0, 0x87, 0x5d, 0x3a, 0x28,
	0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x4a, 0x95, 0x80, 0xaa, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54,
	0x25, 0xad, 0xa6, 0xcb, 0x4f, 0x26, 0x33, 0xa9, 0x08, 0x29, 0xe9, 0x97, 0x19, 0xc2, 0xdc, 0xac,
	0x8f, 0xc3, 0xe2, 0x5e, 0x46, 0x2e, 0x51, 0xac, 0x52, 0x42, 0xca, 0xf8, 0x2c, 0x83, 0xb9, 0x48,
	0x05, 0xbf, 0x22, 0xa8, 0x83, 0x34, 0xc1, 0x0e, 0x52, 0x16, 0x52, 0x24, 0xe8, 0x20, 0x27, 0x9d,
	0x28, 0xad, 0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0xfd, 0xaa, 0xfc, 0xfc,
	0xa4, 0x64, 0x08, 0xa9, 0x9b, 0x9c, 0x5f, 0x94, 0xaa, 0x9f, 0x9c, 0x9f, 0x9b, 0x9b, 0x9f, 0xa7,
	0x0f, 0x8d, 0x97, 0x24, 0x36, 0x70, 0x58, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xf8, 0xfb,
	0x99, 0x72, 0xc0, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MempoolServiceClient is the client API for MempoolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MempoolServiceClient interface {
	GetMempoolTransactions(ctx context.Context, in *model.GetMempoolTransactionsRequest, opts ...grpc.CallOption) (*model.GetMempoolTransactionsResponse, error)
	GetMempoolTransaction(ctx context.Context, in *model.GetMempoolTransactionRequest, opts ...grpc.CallOption) (*model.GetMempoolTransactionResponse, error)
}

type mempoolServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMempoolServiceClient(cc grpc.ClientConnInterface) MempoolServiceClient {
	return &mempoolServiceClient{cc}
}

func (c *mempoolServiceClient) GetMempoolTransactions(ctx context.Context, in *model.GetMempoolTransactionsRequest, opts ...grpc.CallOption) (*model.GetMempoolTransactionsResponse, error) {
	out := new(model.GetMempoolTransactionsResponse)
	err := c.cc.Invoke(ctx, "/service.MempoolService/GetMempoolTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mempoolServiceClient) GetMempoolTransaction(ctx context.Context, in *model.GetMempoolTransactionRequest, opts ...grpc.CallOption) (*model.GetMempoolTransactionResponse, error) {
	out := new(model.GetMempoolTransactionResponse)
	err := c.cc.Invoke(ctx, "/service.MempoolService/GetMempoolTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MempoolServiceServer is the server API for MempoolService service.
type MempoolServiceServer interface {
	GetMempoolTransactions(context.Context, *model.GetMempoolTransactionsRequest) (*model.GetMempoolTransactionsResponse, error)
	GetMempoolTransaction(context.Context, *model.GetMempoolTransactionRequest) (*model.GetMempoolTransactionResponse, error)
}

// UnimplementedMempoolServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMempoolServiceServer struct {
}

func (*UnimplementedMempoolServiceServer) GetMempoolTransactions(ctx context.Context, req *model.GetMempoolTransactionsRequest) (*model.GetMempoolTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMempoolTransactions not implemented")
}
func (*UnimplementedMempoolServiceServer) GetMempoolTransaction(ctx context.Context, req *model.GetMempoolTransactionRequest) (*model.GetMempoolTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMempoolTransaction not implemented")
}

func RegisterMempoolServiceServer(s *grpc.Server, srv MempoolServiceServer) {
	s.RegisterService(&_MempoolService_serviceDesc, srv)
}

func _MempoolService_GetMempoolTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetMempoolTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MempoolServiceServer).GetMempoolTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.MempoolService/GetMempoolTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MempoolServiceServer).GetMempoolTransactions(ctx, req.(*model.GetMempoolTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MempoolService_GetMempoolTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetMempoolTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MempoolServiceServer).GetMempoolTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.MempoolService/GetMempoolTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MempoolServiceServer).GetMempoolTransaction(ctx, req.(*model.GetMempoolTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MempoolService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.MempoolService",
	HandlerType: (*MempoolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMempoolTransactions",
			Handler:    _MempoolService_GetMempoolTransactions_Handler,
		},
		{
			MethodName: "GetMempoolTransaction",
			Handler:    _MempoolService_GetMempoolTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/mempool.proto",
}
