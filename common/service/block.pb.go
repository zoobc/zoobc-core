// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service/block.proto

package service // import "github.com/zoobc/zoobc-core/common/service"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import model "github.com/zoobc/zoobc-core/common/model"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BlockServiceClient is the client API for BlockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlockServiceClient interface {
	GetBlocks(ctx context.Context, in *model.GetBlocksRequest, opts ...grpc.CallOption) (*model.GetBlocksResponse, error)
	GetBlock(ctx context.Context, in *model.GetBlockRequest, opts ...grpc.CallOption) (*model.Block, error)
}

type blockServiceClient struct {
	cc *grpc.ClientConn
}

func NewBlockServiceClient(cc *grpc.ClientConn) BlockServiceClient {
	return &blockServiceClient{cc}
}

func (c *blockServiceClient) GetBlocks(ctx context.Context, in *model.GetBlocksRequest, opts ...grpc.CallOption) (*model.GetBlocksResponse, error) {
	out := new(model.GetBlocksResponse)
	err := c.cc.Invoke(ctx, "/service.BlockService/GetBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockServiceClient) GetBlock(ctx context.Context, in *model.GetBlockRequest, opts ...grpc.CallOption) (*model.Block, error) {
	out := new(model.Block)
	err := c.cc.Invoke(ctx, "/service.BlockService/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockServiceServer is the server API for BlockService service.
type BlockServiceServer interface {
	GetBlocks(context.Context, *model.GetBlocksRequest) (*model.GetBlocksResponse, error)
	GetBlock(context.Context, *model.GetBlockRequest) (*model.Block, error)
}

func RegisterBlockServiceServer(s *grpc.Server, srv BlockServiceServer) {
	s.RegisterService(&_BlockService_serviceDesc, srv)
}

func _BlockService_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServiceServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.BlockService/GetBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServiceServer).GetBlocks(ctx, req.(*model.GetBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockService_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServiceServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.BlockService/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServiceServer).GetBlock(ctx, req.(*model.GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlockService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.BlockService",
	HandlerType: (*BlockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlocks",
			Handler:    _BlockService_GetBlocks_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _BlockService_GetBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/block.proto",
}

func init() { proto.RegisterFile("service/block.proto", fileDescriptor_block_adfcfc2b2b4f8b54) }

var fileDescriptor_block_adfcfc2b2b4f8b54 = []byte{
	// 216 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x4f, 0xca, 0xc9, 0x4f, 0xce, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x62, 0x87, 0x0a, 0x4a, 0xc9, 0xa4, 0xe7, 0xe7, 0xa7, 0xe7, 0xa4, 0xea, 0x27, 0x16, 0x64, 0xea,
	0x27, 0xe6, 0xe5, 0xe5, 0x97, 0x24, 0x96, 0x64, 0xe6, 0xe7, 0x15, 0x43, 0x94, 0x49, 0x09, 0xe6,
	0xe6, 0xa7, 0xa4, 0xe6, 0x20, 0xeb, 0x34, 0xda, 0xc9, 0xc8, 0xc5, 0xe3, 0x04, 0xe2, 0x07, 0x43,
	0x4c, 0x10, 0x8a, 0xe6, 0xe2, 0x74, 0x4f, 0x2d, 0x01, 0x0b, 0x15, 0x0b, 0x89, 0xeb, 0x81, 0x75,
	0xe8, 0xc1, 0x45, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0xa4, 0x24, 0x30, 0x25, 0x8a, 0x0b,
	0xf2, 0xf3, 0x8a, 0x53, 0x95, 0xa4, 0x9b, 0x2e, 0x3f, 0x99, 0xcc, 0x24, 0x2a, 0x24, 0xac, 0x5f,
	0x66, 0x08, 0xb1, 0x49, 0x1f, 0x61, 0x9e, 0x0f, 0x17, 0x07, 0x8c, 0x23, 0x24, 0x86, 0x66, 0x04,
	0xcc, 0x68, 0x1e, 0xa8, 0x38, 0x58, 0x50, 0x49, 0x0a, 0x6c, 0x9c, 0x88, 0x90, 0x10, 0xa6, 0x71,
	0x4e, 0x3a, 0x51, 0x5a, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0x55,
	0xf9, 0xf9, 0x49, 0xc9, 0x10, 0x52, 0x37, 0x39, 0xbf, 0x28, 0x55, 0x3f, 0x39, 0x3f, 0x37, 0x37,
	0x3f, 0x4f, 0x1f, 0x1a, 0x34, 0x49, 0x6c, 0x60, 0x0f, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xa5, 0x70, 0x93, 0x2f, 0x41, 0x01, 0x00, 0x00,
}
