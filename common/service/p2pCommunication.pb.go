// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service/p2pCommunication.proto

package service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	model "github.com/zoobc/zoobc-core/common/model"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service/p2pCommunication.proto", fileDescriptor_5d547fbc25d9babc) }

var fileDescriptor_5d547fbc25d9babc = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x4f, 0x4b, 0xc4, 0x30,
	0x10, 0xc5, 0x17, 0x0f, 0x8a, 0xd9, 0x05, 0xd7, 0x5c, 0x16, 0x2b, 0x7a, 0xd8, 0x9b, 0xa2, 0x0d,
	0x54, 0xc1, 0x83, 0x17, 0x59, 0x91, 0xc5, 0x83, 0x52, 0x56, 0x4f, 0xde, 0xda, 0x74, 0xd4, 0xe2,
	0x26, 0x13, 0x93, 0x54, 0xd0, 0xaf, 0xe4, 0x97, 0x94, 0x34, 0xe9, 0x3f, 0x64, 0x2f, 0x85, 0xfe,
	0xde, 0x7b, 0xf3, 0xa6, 0x53, 0x72, 0x6c, 0x40, 0x7f, 0x95, 0x1c, 0x98, 0x4a, 0xd4, 0x2d, 0x0a,
	0x51, 0xc9, 0x92, 0x67, 0xb6, 0x44, 0x19, 0x2b, 0x8d, 0x16, 0xe9, 0x4e, 0xd0, 0xa3, 0xa9, 0xc0,
	0x02, 0xd6, 0x4c, 0x01, 0x68, 0x2f, 0x35, 0x44, 0x62, 0x01, 0x81, 0xec, 0x7b, 0x02, 0x42, 0xd9,
	0xef, 0x21, 0xca, 0xd7, 0xc8, 0x3f, 0x02, 0x9a, 0x79, 0x64, 0x75, 0x26, 0x4d, 0xc6, 0xbb, 0xae,
	0xe4, 0x77, 0x8b, 0x4c, 0xd3, 0x24, 0x1d, 0xac, 0x41, 0xaf, 0xc8, 0x78, 0x09, 0x36, 0x05, 0xd0,
	0xf7, 0xf2, 0x15, 0xe9, 0x41, 0x5c, 0xa7, 0xe3, 0x1e, 0x5b, 0xc1, 0x67, 0x05, 0xc6, 0x46, 0xe3,
	0x20, 0x3d, 0x62, 0x01, 0xf3, 0x11, 0xbd, 0x26, 0x93, 0x25, 0xd8, 0x07, 0xd4, 0xe0, 0x8c, 0x86,
	0x4e, 0x82, 0x7c, 0xe7, 0xb6, 0x8b, 0x0e, 0xbb, 0x39, 0xad, 0x65, 0x05, 0x46, 0xa1, 0x34, 0x2e,
	0x7c, 0x49, 0x76, 0x9f, 0x40, 0x16, 0x3e, 0x39, 0x0b, 0xde, 0x96, 0x34, 0x8d, 0x83, 0x91, 0xf3,
	0x11, 0x3d, 0xf1, 0xa9, 0x85, 0xfb, 0xd8, 0xb6, 0xaf, 0x7e, 0xfb, 0x67, 0xbd, 0x21, 0x7b, 0xce,
	0xfa, 0xdc, 0x1d, 0x81, 0x1e, 0xf5, 0x6a, 0x7a, 0x7c, 0x43, 0xd9, 0xe2, 0xec, 0xe5, 0xf4, 0xad,
	0xb4, 0xef, 0x55, 0x1e, 0x73, 0x14, 0xec, 0x07, 0x31, 0xe7, 0xfe, 0x79, 0xce, 0x51, 0x03, 0xe3,
	0x28, 0x04, 0x4a, 0x16, 0x7e, 0x5f, 0xbe, 0x5d, 0x9f, 0xf8, 0xe2, 0x2f, 0x00, 0x00, 0xff, 0xff,
	0xe0, 0x07, 0x23, 0x05, 0xf0, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// P2PCommunicationClient is the client API for P2PCommunication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type P2PCommunicationClient interface {
	GetPeerInfo(ctx context.Context, in *model.GetPeerInfoRequest, opts ...grpc.CallOption) (*model.Node, error)
	GetMorePeers(ctx context.Context, in *model.Empty, opts ...grpc.CallOption) (*model.GetMorePeersResponse, error)
	SendPeers(ctx context.Context, in *model.SendPeersRequest, opts ...grpc.CallOption) (*model.Empty, error)
	SendBlock(ctx context.Context, in *model.Block, opts ...grpc.CallOption) (*model.Empty, error)
	SendTransaction(ctx context.Context, in *model.SendTransactionRequest, opts ...grpc.CallOption) (*model.Empty, error)
}

type p2PCommunicationClient struct {
	cc *grpc.ClientConn
}

func NewP2PCommunicationClient(cc *grpc.ClientConn) P2PCommunicationClient {
	return &p2PCommunicationClient{cc}
}

func (c *p2PCommunicationClient) GetPeerInfo(ctx context.Context, in *model.GetPeerInfoRequest, opts ...grpc.CallOption) (*model.Node, error) {
	out := new(model.Node)
	err := c.cc.Invoke(ctx, "/service.P2PCommunication/GetPeerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PCommunicationClient) GetMorePeers(ctx context.Context, in *model.Empty, opts ...grpc.CallOption) (*model.GetMorePeersResponse, error) {
	out := new(model.GetMorePeersResponse)
	err := c.cc.Invoke(ctx, "/service.P2PCommunication/GetMorePeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PCommunicationClient) SendPeers(ctx context.Context, in *model.SendPeersRequest, opts ...grpc.CallOption) (*model.Empty, error) {
	out := new(model.Empty)
	err := c.cc.Invoke(ctx, "/service.P2PCommunication/SendPeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PCommunicationClient) SendBlock(ctx context.Context, in *model.Block, opts ...grpc.CallOption) (*model.Empty, error) {
	out := new(model.Empty)
	err := c.cc.Invoke(ctx, "/service.P2PCommunication/SendBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PCommunicationClient) SendTransaction(ctx context.Context, in *model.SendTransactionRequest, opts ...grpc.CallOption) (*model.Empty, error) {
	out := new(model.Empty)
	err := c.cc.Invoke(ctx, "/service.P2PCommunication/SendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// P2PCommunicationServer is the server API for P2PCommunication service.
type P2PCommunicationServer interface {
	GetPeerInfo(context.Context, *model.GetPeerInfoRequest) (*model.Node, error)
	GetMorePeers(context.Context, *model.Empty) (*model.GetMorePeersResponse, error)
	SendPeers(context.Context, *model.SendPeersRequest) (*model.Empty, error)
	SendBlock(context.Context, *model.Block) (*model.Empty, error)
	SendTransaction(context.Context, *model.SendTransactionRequest) (*model.Empty, error)
}

func RegisterP2PCommunicationServer(s *grpc.Server, srv P2PCommunicationServer) {
	s.RegisterService(&_P2PCommunication_serviceDesc, srv)
}

func _P2PCommunication_GetPeerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetPeerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PCommunicationServer).GetPeerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.P2PCommunication/GetPeerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PCommunicationServer).GetPeerInfo(ctx, req.(*model.GetPeerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PCommunication_GetMorePeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PCommunicationServer).GetMorePeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.P2PCommunication/GetMorePeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PCommunicationServer).GetMorePeers(ctx, req.(*model.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PCommunication_SendPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.SendPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PCommunicationServer).SendPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.P2PCommunication/SendPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PCommunicationServer).SendPeers(ctx, req.(*model.SendPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PCommunication_SendBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Block)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PCommunicationServer).SendBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.P2PCommunication/SendBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PCommunicationServer).SendBlock(ctx, req.(*model.Block))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PCommunication_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.SendTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PCommunicationServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.P2PCommunication/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PCommunicationServer).SendTransaction(ctx, req.(*model.SendTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _P2PCommunication_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.P2PCommunication",
	HandlerType: (*P2PCommunicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPeerInfo",
			Handler:    _P2PCommunication_GetPeerInfo_Handler,
		},
		{
			MethodName: "GetMorePeers",
			Handler:    _P2PCommunication_GetMorePeers_Handler,
		},
		{
			MethodName: "SendPeers",
			Handler:    _P2PCommunication_SendPeers_Handler,
		},
		{
			MethodName: "SendBlock",
			Handler:    _P2PCommunication_SendBlock_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _P2PCommunication_SendTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/p2pCommunication.proto",
}
