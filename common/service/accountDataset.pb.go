// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service/accountDataset.proto

package service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	model "github.com/zoobc/zoobc-core/common/model"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("service/accountDataset.proto", fileDescriptor_2e05ba97ba46e9e1)
}

var fileDescriptor_2e05ba97ba46e9e1 = []byte{
	// 229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x29, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x4f, 0x4c, 0x4e, 0xce, 0x2f, 0xcd, 0x2b, 0x71, 0x49, 0x2c, 0x49, 0x2c,
	0x4e, 0x2d, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0xca, 0x4a, 0x49, 0xe5, 0xe6,
	0xa7, 0xa4, 0xe6, 0x60, 0x55, 0x24, 0x25, 0x93, 0x9e, 0x9f, 0x9f, 0x9e, 0x93, 0xaa, 0x9f, 0x58,
	0x90, 0xa9, 0x9f, 0x98, 0x97, 0x97, 0x5f, 0x92, 0x58, 0x92, 0x99, 0x9f, 0x57, 0x0c, 0x91, 0x35,
	0x9a, 0xcb, 0xc4, 0x25, 0xea, 0x88, 0xa2, 0x2d, 0x18, 0x62, 0xa6, 0x50, 0x07, 0x23, 0x97, 0x90,
	0x7b, 0x6a, 0x09, 0xaa, 0x64, 0xb1, 0x90, 0x82, 0x1e, 0xd8, 0x2e, 0x3d, 0x4c, 0xa9, 0xa0, 0xd4,
	0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x29, 0x45, 0x3c, 0x2a, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x95,
	0x74, 0x9b, 0x2e, 0x3f, 0x99, 0xcc, 0xa4, 0x2e, 0xa4, 0xaa, 0x5f, 0x66, 0x88, 0xe6, 0x6a, 0x7d,
	0x2c, 0x76, 0x56, 0x72, 0x09, 0x62, 0x88, 0x0a, 0xc9, 0xe3, 0xb2, 0x06, 0xe6, 0x0e, 0x51, 0xa8,
	0x02, 0x54, 0x59, 0x25, 0x1d, 0xb0, 0xdd, 0x6a, 0x42, 0x2a, 0xc4, 0xd8, 0xed, 0xa4, 0x13, 0xa5,
	0x95, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x5f, 0x95, 0x9f, 0x9f, 0x94,
	0x0c, 0x21, 0x75, 0x93, 0xf3, 0x8b, 0x52, 0xf5, 0x93, 0xf3, 0x73, 0x73, 0xf3, 0xf3, 0xf4, 0xa1,
	0xf1, 0x90, 0xc4, 0x06, 0x0e, 0x54, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x22, 0x08,
	0x37, 0xb7, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AccountDatasetServiceClient is the client API for AccountDatasetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccountDatasetServiceClient interface {
	GetAccountDatasets(ctx context.Context, in *model.GetAccountDatasetsRequest, opts ...grpc.CallOption) (*model.GetAccountDatasetsResponse, error)
	GetAccountDataset(ctx context.Context, in *model.GetAccountDatasetRequest, opts ...grpc.CallOption) (*model.AccountDataset, error)
}

type accountDatasetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountDatasetServiceClient(cc grpc.ClientConnInterface) AccountDatasetServiceClient {
	return &accountDatasetServiceClient{cc}
}

func (c *accountDatasetServiceClient) GetAccountDatasets(ctx context.Context, in *model.GetAccountDatasetsRequest, opts ...grpc.CallOption) (*model.GetAccountDatasetsResponse, error) {
	out := new(model.GetAccountDatasetsResponse)
	err := c.cc.Invoke(ctx, "/service.AccountDatasetService/GetAccountDatasets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountDatasetServiceClient) GetAccountDataset(ctx context.Context, in *model.GetAccountDatasetRequest, opts ...grpc.CallOption) (*model.AccountDataset, error) {
	out := new(model.AccountDataset)
	err := c.cc.Invoke(ctx, "/service.AccountDatasetService/GetAccountDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountDatasetServiceServer is the server API for AccountDatasetService service.
type AccountDatasetServiceServer interface {
	GetAccountDatasets(context.Context, *model.GetAccountDatasetsRequest) (*model.GetAccountDatasetsResponse, error)
	GetAccountDataset(context.Context, *model.GetAccountDatasetRequest) (*model.AccountDataset, error)
}

// UnimplementedAccountDatasetServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAccountDatasetServiceServer struct {
}

func (*UnimplementedAccountDatasetServiceServer) GetAccountDatasets(ctx context.Context, req *model.GetAccountDatasetsRequest) (*model.GetAccountDatasetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountDatasets not implemented")
}
func (*UnimplementedAccountDatasetServiceServer) GetAccountDataset(ctx context.Context, req *model.GetAccountDatasetRequest) (*model.AccountDataset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountDataset not implemented")
}

func RegisterAccountDatasetServiceServer(s *grpc.Server, srv AccountDatasetServiceServer) {
	s.RegisterService(&_AccountDatasetService_serviceDesc, srv)
}

func _AccountDatasetService_GetAccountDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetAccountDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountDatasetServiceServer).GetAccountDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.AccountDatasetService/GetAccountDatasets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountDatasetServiceServer).GetAccountDatasets(ctx, req.(*model.GetAccountDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountDatasetService_GetAccountDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetAccountDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountDatasetServiceServer).GetAccountDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.AccountDatasetService/GetAccountDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountDatasetServiceServer).GetAccountDataset(ctx, req.(*model.GetAccountDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountDatasetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.AccountDatasetService",
	HandlerType: (*AccountDatasetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountDatasets",
			Handler:    _AccountDatasetService_GetAccountDatasets_Handler,
		},
		{
			MethodName: "GetAccountDataset",
			Handler:    _AccountDatasetService_GetAccountDataset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/accountDataset.proto",
}
