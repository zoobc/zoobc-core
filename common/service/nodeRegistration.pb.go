// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service/nodeRegistration.proto

package service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	model "github.com/zoobc/zoobc-core/common/model"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service/nodeRegistration.proto", fileDescriptor_d783036dc420a87c) }

var fileDescriptor_d783036dc420a87c = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2b, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0xcf, 0xcb, 0x4f, 0x49, 0x0d, 0x4a, 0x4d, 0xcf, 0x2c, 0x2e, 0x29, 0x4a,
	0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0xca, 0x4b, 0xc9,
	0xe4, 0xe6, 0xa7, 0xa4, 0xe6, 0xe0, 0x50, 0x26, 0x25, 0x93, 0x9e, 0x9f, 0x9f, 0x9e, 0x93, 0xaa,
	0x9f, 0x58, 0x90, 0xa9, 0x9f, 0x98, 0x97, 0x97, 0x5f, 0x02, 0x96, 0x2c, 0x86, 0xc8, 0x1a, 0x1d,
	0x66, 0xe6, 0x12, 0xf7, 0x43, 0xd3, 0x18, 0x0c, 0x31, 0x57, 0x68, 0x12, 0x23, 0x97, 0x88, 0x7b,
	0x6a, 0x09, 0xba, 0x74, 0xb1, 0x90, 0x92, 0x1e, 0xd8, 0x46, 0x3d, 0x6c, 0x92, 0x41, 0xa9, 0x85,
	0xa5, 0xa9, 0xc5, 0x25, 0x52, 0xca, 0x78, 0xd5, 0x14, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x2a, 0x19,
	0x36, 0x5d, 0x7e, 0x32, 0x99, 0x49, 0x5b, 0x48, 0x53, 0xbf, 0xcc, 0x10, 0xc3, 0xfd, 0xfa, 0x58,
	0xed, 0x6e, 0x66, 0xe4, 0x12, 0xc6, 0x22, 0x21, 0xa4, 0x88, 0xdb, 0x3e, 0x98, 0x93, 0xc4, 0xa1,
	0x4a, 0xd0, 0xe5, 0x95, 0x0c, 0xc0, 0xce, 0xd0, 0x12, 0xd2, 0x20, 0xd6, 0x19, 0x42, 0x3d, 0x8c,
	0x5c, 0x62, 0xa1, 0x05, 0x29, 0x89, 0x25, 0xa9, 0x18, 0x52, 0x2a, 0x50, 0x5b, 0xb0, 0x4b, 0x13,
	0x74, 0x8b, 0x31, 0xd8, 0x2d, 0xba, 0x42, 0xda, 0x58, 0xdd, 0x82, 0xdd, 0x50, 0x27, 0x9d, 0x28,
	0xad, 0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0xfd, 0xaa, 0xfc, 0xfc, 0xa4,
	0x64, 0x08, 0xa9, 0x9b, 0x9c, 0x5f, 0x94, 0xaa, 0x9f, 0x9c, 0x9f, 0x9b, 0x9b, 0x9f, 0xa7, 0x0f,
	0x4d, 0x2f, 0x49, 0x6c, 0xe0, 0xa8, 0x37, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xc8, 0xa7, 0x4d,
	0x7b, 0x61, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeRegistrationServiceClient is the client API for NodeRegistrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeRegistrationServiceClient interface {
	GetNodeRegistrations(ctx context.Context, in *model.GetNodeRegistrationsRequest, opts ...grpc.CallOption) (*model.GetNodeRegistrationsResponse, error)
	GetNodeRegistration(ctx context.Context, in *model.GetNodeRegistrationRequest, opts ...grpc.CallOption) (*model.NodeRegistration, error)
	UpdateNodeRegistration(ctx context.Context, in *model.UpdateNodeRegistrationRequest, opts ...grpc.CallOption) (*model.NodeRegistration, error)
}

type nodeRegistrationServiceClient struct {
	cc *grpc.ClientConn
}

func NewNodeRegistrationServiceClient(cc *grpc.ClientConn) NodeRegistrationServiceClient {
	return &nodeRegistrationServiceClient{cc}
}

func (c *nodeRegistrationServiceClient) GetNodeRegistrations(ctx context.Context, in *model.GetNodeRegistrationsRequest, opts ...grpc.CallOption) (*model.GetNodeRegistrationsResponse, error) {
	out := new(model.GetNodeRegistrationsResponse)
	err := c.cc.Invoke(ctx, "/service.NodeRegistrationService/GetNodeRegistrations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRegistrationServiceClient) GetNodeRegistration(ctx context.Context, in *model.GetNodeRegistrationRequest, opts ...grpc.CallOption) (*model.NodeRegistration, error) {
	out := new(model.NodeRegistration)
	err := c.cc.Invoke(ctx, "/service.NodeRegistrationService/GetNodeRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRegistrationServiceClient) UpdateNodeRegistration(ctx context.Context, in *model.UpdateNodeRegistrationRequest, opts ...grpc.CallOption) (*model.NodeRegistration, error) {
	out := new(model.NodeRegistration)
	err := c.cc.Invoke(ctx, "/service.NodeRegistrationService/UpdateNodeRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeRegistrationServiceServer is the server API for NodeRegistrationService service.
type NodeRegistrationServiceServer interface {
	GetNodeRegistrations(context.Context, *model.GetNodeRegistrationsRequest) (*model.GetNodeRegistrationsResponse, error)
	GetNodeRegistration(context.Context, *model.GetNodeRegistrationRequest) (*model.NodeRegistration, error)
	UpdateNodeRegistration(context.Context, *model.UpdateNodeRegistrationRequest) (*model.NodeRegistration, error)
}

func RegisterNodeRegistrationServiceServer(s *grpc.Server, srv NodeRegistrationServiceServer) {
	s.RegisterService(&_NodeRegistrationService_serviceDesc, srv)
}

func _NodeRegistrationService_GetNodeRegistrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetNodeRegistrationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRegistrationServiceServer).GetNodeRegistrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeRegistrationService/GetNodeRegistrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRegistrationServiceServer).GetNodeRegistrations(ctx, req.(*model.GetNodeRegistrationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRegistrationService_GetNodeRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetNodeRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRegistrationServiceServer).GetNodeRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeRegistrationService/GetNodeRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRegistrationServiceServer).GetNodeRegistration(ctx, req.(*model.GetNodeRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRegistrationService_UpdateNodeRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.UpdateNodeRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRegistrationServiceServer).UpdateNodeRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeRegistrationService/UpdateNodeRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRegistrationServiceServer).UpdateNodeRegistration(ctx, req.(*model.UpdateNodeRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeRegistrationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.NodeRegistrationService",
	HandlerType: (*NodeRegistrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodeRegistrations",
			Handler:    _NodeRegistrationService_GetNodeRegistrations_Handler,
		},
		{
			MethodName: "GetNodeRegistration",
			Handler:    _NodeRegistrationService_GetNodeRegistration_Handler,
		},
		{
			MethodName: "UpdateNodeRegistration",
			Handler:    _NodeRegistrationService_UpdateNodeRegistration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/nodeRegistration.proto",
}
