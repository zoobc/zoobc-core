// Code generated by MockGen. DO NOT EDIT.
// Source: kvdb.go

// Package kvdb is a generated GoMock package.
package kvdb

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockKVExecutorInterface is a mock of KVExecutorInterface interface
type MockKVExecutorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockKVExecutorInterfaceMockRecorder
}

// MockKVExecutorInterfaceMockRecorder is the mock recorder for MockKVExecutorInterface
type MockKVExecutorInterfaceMockRecorder struct {
	mock *MockKVExecutorInterface
}

// NewMockKVExecutorInterface creates a new mock instance
func NewMockKVExecutorInterface(ctrl *gomock.Controller) *MockKVExecutorInterface {
	mock := &MockKVExecutorInterface{ctrl: ctrl}
	mock.recorder = &MockKVExecutorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKVExecutorInterface) EXPECT() *MockKVExecutorInterfaceMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockKVExecutorInterface) Insert(key string, value []byte, expiry int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", key, value, expiry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockKVExecutorInterfaceMockRecorder) Insert(key, value, expiry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockKVExecutorInterface)(nil).Insert), key, value, expiry)
}

// BatchInsert mocks base method
func (m *MockKVExecutorInterface) BatchInsert(updates map[string][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchInsert", updates)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchInsert indicates an expected call of BatchInsert
func (mr *MockKVExecutorInterfaceMockRecorder) BatchInsert(updates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchInsert", reflect.TypeOf((*MockKVExecutorInterface)(nil).BatchInsert), updates)
}

// Get mocks base method
func (m *MockKVExecutorInterface) Get(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockKVExecutorInterfaceMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKVExecutorInterface)(nil).Get), key)
}

// GetByPrefix mocks base method
func (m *MockKVExecutorInterface) GetByPrefix(prefix string) (map[string][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPrefix", prefix)
	ret0, _ := ret[0].(map[string][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPrefix indicates an expected call of GetByPrefix
func (mr *MockKVExecutorInterfaceMockRecorder) GetByPrefix(prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPrefix", reflect.TypeOf((*MockKVExecutorInterface)(nil).GetByPrefix), prefix)
}
