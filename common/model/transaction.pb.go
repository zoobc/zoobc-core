// ZooBC zoobc-schema
//
// Copyright Â© 2020 Quasisoft Limited - Hong Kong
//
// ZooBC is architected by Roberto Capodieci & Barton Johnston
//             contact us at roberto.capodieci[at]blockchainzoo.com
//             and barton.johnston[at]blockchainzoo.com
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: model/transaction.proto

package model

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TransactionType int32

const (
	// in bytes: []byte{0,0,0,0}
	TransactionType_EmptyTransaction TransactionType = 0
	// in bytes: []byte{1,0,0,0}
	TransactionType_SendMoneyTransaction TransactionType = 1
	// in bytes: []byte{2,0,0,0}
	TransactionType_NodeRegistrationTransaction TransactionType = 2
	// in bytes: []byte{2,1,0,0}
	TransactionType_UpdateNodeRegistrationTransaction TransactionType = 258
	// in bytes: []byte{2,2,0,0}
	TransactionType_RemoveNodeRegistrationTransaction TransactionType = 514
	// in bytes: []byte{2,3,0,0}
	TransactionType_ClaimNodeRegistrationTransaction TransactionType = 770
	// in bytes: []byte{3,0,0,0}
	TransactionType_SetupAccountDatasetTransaction TransactionType = 3
	// in bytes: []byte{3,1,0,0}
	TransactionType_RemoveAccountDatasetTransaction TransactionType = 259
	// in bytes: []byte{4,0,0,0}
	TransactionType_ApprovalEscrowTransaction TransactionType = 4
	// in bytes: []byte{5,0,0,0}
	TransactionType_MultiSignatureTransaction TransactionType = 5
	// in bytes: []byte{6,0,0,0}
	TransactionType_LiquidPaymentTransaction TransactionType = 6
	// in bytes: []byte{6,1,0,0}
	TransactionType_LiquidPaymentStopTransaction TransactionType = 262
	// in bytes: []byte{7,0,0,0}
	TransactionType_FeeVoteCommitmentVoteTransaction TransactionType = 7
	// in bytes: []byte{7,1,0,0}
	TransactionType_FeeVoteRevealVoteTransaction TransactionType = 263
)

// Enum value maps for TransactionType.
var (
	TransactionType_name = map[int32]string{
		0:   "EmptyTransaction",
		1:   "SendMoneyTransaction",
		2:   "NodeRegistrationTransaction",
		258: "UpdateNodeRegistrationTransaction",
		514: "RemoveNodeRegistrationTransaction",
		770: "ClaimNodeRegistrationTransaction",
		3:   "SetupAccountDatasetTransaction",
		259: "RemoveAccountDatasetTransaction",
		4:   "ApprovalEscrowTransaction",
		5:   "MultiSignatureTransaction",
		6:   "LiquidPaymentTransaction",
		262: "LiquidPaymentStopTransaction",
		7:   "FeeVoteCommitmentVoteTransaction",
		263: "FeeVoteRevealVoteTransaction",
	}
	TransactionType_value = map[string]int32{
		"EmptyTransaction":                  0,
		"SendMoneyTransaction":              1,
		"NodeRegistrationTransaction":       2,
		"UpdateNodeRegistrationTransaction": 258,
		"RemoveNodeRegistrationTransaction": 514,
		"ClaimNodeRegistrationTransaction":  770,
		"SetupAccountDatasetTransaction":    3,
		"RemoveAccountDatasetTransaction":   259,
		"ApprovalEscrowTransaction":         4,
		"MultiSignatureTransaction":         5,
		"LiquidPaymentTransaction":          6,
		"LiquidPaymentStopTransaction":      262,
		"FeeVoteCommitmentVoteTransaction":  7,
		"FeeVoteRevealVoteTransaction":      263,
	}
)

func (x TransactionType) Enum() *TransactionType {
	p := new(TransactionType)
	*p = x
	return p
}

func (x TransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_model_transaction_proto_enumTypes[0].Descriptor()
}

func (TransactionType) Type() protoreflect.EnumType {
	return &file_model_transaction_proto_enumTypes[0]
}

func (x TransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionType.Descriptor instead.
func (TransactionType) EnumDescriptor() ([]byte, []int) {
	return file_model_transaction_proto_rawDescGZIP(), []int{0}
}

// Transaction represent the transaction data structure stored in the database
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version                 uint32 `protobuf:"varint,1,opt,name=Version,proto3" json:"Version,omitempty"`
	ID                      int64  `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
	BlockID                 int64  `protobuf:"varint,3,opt,name=BlockID,proto3" json:"BlockID,omitempty"`
	Height                  uint32 `protobuf:"varint,4,opt,name=Height,proto3" json:"Height,omitempty"`
	SenderAccountAddress    []byte `protobuf:"bytes,5,opt,name=SenderAccountAddress,proto3" json:"SenderAccountAddress,omitempty"`
	RecipientAccountAddress []byte `protobuf:"bytes,6,opt,name=RecipientAccountAddress,proto3" json:"RecipientAccountAddress,omitempty"`
	TransactionType         uint32 `protobuf:"varint,7,opt,name=TransactionType,proto3" json:"TransactionType,omitempty"`
	Fee                     int64  `protobuf:"varint,8,opt,name=Fee,proto3" json:"Fee,omitempty"`
	Timestamp               int64  `protobuf:"varint,9,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	TransactionHash         []byte `protobuf:"bytes,10,opt,name=TransactionHash,proto3" json:"TransactionHash,omitempty"`
	TransactionBodyLength   uint32 `protobuf:"varint,11,opt,name=TransactionBodyLength,proto3" json:"TransactionBodyLength,omitempty"`
	TransactionBodyBytes    []byte `protobuf:"bytes,12,opt,name=TransactionBodyBytes,proto3" json:"TransactionBodyBytes,omitempty"`
	TransactionIndex        uint32 `protobuf:"varint,13,opt,name=TransactionIndex,proto3" json:"TransactionIndex,omitempty"`
	MultisigChild           bool   `protobuf:"varint,14,opt,name=MultisigChild,proto3" json:"MultisigChild,omitempty"`
	// transactionbody
	//
	// Types that are assignable to TransactionBody:
	//	*Transaction_EmptyTransactionBody
	//	*Transaction_SendMoneyTransactionBody
	//	*Transaction_NodeRegistrationTransactionBody
	//	*Transaction_UpdateNodeRegistrationTransactionBody
	//	*Transaction_RemoveNodeRegistrationTransactionBody
	//	*Transaction_ClaimNodeRegistrationTransactionBody
	//	*Transaction_SetupAccountDatasetTransactionBody
	//	*Transaction_RemoveAccountDatasetTransactionBody
	//	*Transaction_ApprovalEscrowTransactionBody
	//	*Transaction_MultiSignatureTransactionBody
	//	*Transaction_FeeVoteCommitTransactionBody
	//	*Transaction_FeeVoteRevealTransactionBody
	//	*Transaction_LiquidPaymentTransactionBody
	//	*Transaction_LiquidPaymentStopTransactionBody
	TransactionBody isTransaction_TransactionBody `protobuf_oneof:"TransactionBody"`
	Signature       []byte                        `protobuf:"bytes,31,opt,name=Signature,proto3" json:"Signature,omitempty"`
	// nullable
	Escrow  *Escrow `protobuf:"bytes,32,opt,name=Escrow,proto3" json:"Escrow,omitempty"`
	Message []byte  `protobuf:"bytes,33,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_transaction_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_model_transaction_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_model_transaction_proto_rawDescGZIP(), []int{0}
}

func (x *Transaction) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Transaction) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Transaction) GetBlockID() int64 {
	if x != nil {
		return x.BlockID
	}
	return 0
}

func (x *Transaction) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Transaction) GetSenderAccountAddress() []byte {
	if x != nil {
		return x.SenderAccountAddress
	}
	return nil
}

func (x *Transaction) GetRecipientAccountAddress() []byte {
	if x != nil {
		return x.RecipientAccountAddress
	}
	return nil
}

func (x *Transaction) GetTransactionType() uint32 {
	if x != nil {
		return x.TransactionType
	}
	return 0
}

func (x *Transaction) GetFee() int64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *Transaction) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Transaction) GetTransactionHash() []byte {
	if x != nil {
		return x.TransactionHash
	}
	return nil
}

func (x *Transaction) GetTransactionBodyLength() uint32 {
	if x != nil {
		return x.TransactionBodyLength
	}
	return 0
}

func (x *Transaction) GetTransactionBodyBytes() []byte {
	if x != nil {
		return x.TransactionBodyBytes
	}
	return nil
}

func (x *Transaction) GetTransactionIndex() uint32 {
	if x != nil {
		return x.TransactionIndex
	}
	return 0
}

func (x *Transaction) GetMultisigChild() bool {
	if x != nil {
		return x.MultisigChild
	}
	return false
}

func (m *Transaction) GetTransactionBody() isTransaction_TransactionBody {
	if m != nil {
		return m.TransactionBody
	}
	return nil
}

func (x *Transaction) GetEmptyTransactionBody() *EmptyTransactionBody {
	if x, ok := x.GetTransactionBody().(*Transaction_EmptyTransactionBody); ok {
		return x.EmptyTransactionBody
	}
	return nil
}

func (x *Transaction) GetSendMoneyTransactionBody() *SendMoneyTransactionBody {
	if x, ok := x.GetTransactionBody().(*Transaction_SendMoneyTransactionBody); ok {
		return x.SendMoneyTransactionBody
	}
	return nil
}

func (x *Transaction) GetNodeRegistrationTransactionBody() *NodeRegistrationTransactionBody {
	if x, ok := x.GetTransactionBody().(*Transaction_NodeRegistrationTransactionBody); ok {
		return x.NodeRegistrationTransactionBody
	}
	return nil
}

func (x *Transaction) GetUpdateNodeRegistrationTransactionBody() *UpdateNodeRegistrationTransactionBody {
	if x, ok := x.GetTransactionBody().(*Transaction_UpdateNodeRegistrationTransactionBody); ok {
		return x.UpdateNodeRegistrationTransactionBody
	}
	return nil
}

func (x *Transaction) GetRemoveNodeRegistrationTransactionBody() *RemoveNodeRegistrationTransactionBody {
	if x, ok := x.GetTransactionBody().(*Transaction_RemoveNodeRegistrationTransactionBody); ok {
		return x.RemoveNodeRegistrationTransactionBody
	}
	return nil
}

func (x *Transaction) GetClaimNodeRegistrationTransactionBody() *ClaimNodeRegistrationTransactionBody {
	if x, ok := x.GetTransactionBody().(*Transaction_ClaimNodeRegistrationTransactionBody); ok {
		return x.ClaimNodeRegistrationTransactionBody
	}
	return nil
}

func (x *Transaction) GetSetupAccountDatasetTransactionBody() *SetupAccountDatasetTransactionBody {
	if x, ok := x.GetTransactionBody().(*Transaction_SetupAccountDatasetTransactionBody); ok {
		return x.SetupAccountDatasetTransactionBody
	}
	return nil
}

func (x *Transaction) GetRemoveAccountDatasetTransactionBody() *RemoveAccountDatasetTransactionBody {
	if x, ok := x.GetTransactionBody().(*Transaction_RemoveAccountDatasetTransactionBody); ok {
		return x.RemoveAccountDatasetTransactionBody
	}
	return nil
}

func (x *Transaction) GetApprovalEscrowTransactionBody() *ApprovalEscrowTransactionBody {
	if x, ok := x.GetTransactionBody().(*Transaction_ApprovalEscrowTransactionBody); ok {
		return x.ApprovalEscrowTransactionBody
	}
	return nil
}

func (x *Transaction) GetMultiSignatureTransactionBody() *MultiSignatureTransactionBody {
	if x, ok := x.GetTransactionBody().(*Transaction_MultiSignatureTransactionBody); ok {
		return x.MultiSignatureTransactionBody
	}
	return nil
}

func (x *Transaction) GetFeeVoteCommitTransactionBody() *FeeVoteCommitTransactionBody {
	if x, ok := x.GetTransactionBody().(*Transaction_FeeVoteCommitTransactionBody); ok {
		return x.FeeVoteCommitTransactionBody
	}
	return nil
}

func (x *Transaction) GetFeeVoteRevealTransactionBody() *FeeVoteRevealTransactionBody {
	if x, ok := x.GetTransactionBody().(*Transaction_FeeVoteRevealTransactionBody); ok {
		return x.FeeVoteRevealTransactionBody
	}
	return nil
}

func (x *Transaction) GetLiquidPaymentTransactionBody() *LiquidPaymentTransactionBody {
	if x, ok := x.GetTransactionBody().(*Transaction_LiquidPaymentTransactionBody); ok {
		return x.LiquidPaymentTransactionBody
	}
	return nil
}

func (x *Transaction) GetLiquidPaymentStopTransactionBody() *LiquidPaymentStopTransactionBody {
	if x, ok := x.GetTransactionBody().(*Transaction_LiquidPaymentStopTransactionBody); ok {
		return x.LiquidPaymentStopTransactionBody
	}
	return nil
}

func (x *Transaction) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Transaction) GetEscrow() *Escrow {
	if x != nil {
		return x.Escrow
	}
	return nil
}

func (x *Transaction) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type isTransaction_TransactionBody interface {
	isTransaction_TransactionBody()
}

type Transaction_EmptyTransactionBody struct {
	EmptyTransactionBody *EmptyTransactionBody `protobuf:"bytes,17,opt,name=emptyTransactionBody,proto3,oneof"`
}

type Transaction_SendMoneyTransactionBody struct {
	SendMoneyTransactionBody *SendMoneyTransactionBody `protobuf:"bytes,18,opt,name=sendMoneyTransactionBody,proto3,oneof"`
}

type Transaction_NodeRegistrationTransactionBody struct {
	NodeRegistrationTransactionBody *NodeRegistrationTransactionBody `protobuf:"bytes,19,opt,name=nodeRegistrationTransactionBody,proto3,oneof"`
}

type Transaction_UpdateNodeRegistrationTransactionBody struct {
	UpdateNodeRegistrationTransactionBody *UpdateNodeRegistrationTransactionBody `protobuf:"bytes,20,opt,name=updateNodeRegistrationTransactionBody,proto3,oneof"`
}

type Transaction_RemoveNodeRegistrationTransactionBody struct {
	RemoveNodeRegistrationTransactionBody *RemoveNodeRegistrationTransactionBody `protobuf:"bytes,21,opt,name=removeNodeRegistrationTransactionBody,proto3,oneof"`
}

type Transaction_ClaimNodeRegistrationTransactionBody struct {
	ClaimNodeRegistrationTransactionBody *ClaimNodeRegistrationTransactionBody `protobuf:"bytes,22,opt,name=claimNodeRegistrationTransactionBody,proto3,oneof"`
}

type Transaction_SetupAccountDatasetTransactionBody struct {
	SetupAccountDatasetTransactionBody *SetupAccountDatasetTransactionBody `protobuf:"bytes,23,opt,name=setupAccountDatasetTransactionBody,proto3,oneof"`
}

type Transaction_RemoveAccountDatasetTransactionBody struct {
	RemoveAccountDatasetTransactionBody *RemoveAccountDatasetTransactionBody `protobuf:"bytes,24,opt,name=removeAccountDatasetTransactionBody,proto3,oneof"`
}

type Transaction_ApprovalEscrowTransactionBody struct {
	ApprovalEscrowTransactionBody *ApprovalEscrowTransactionBody `protobuf:"bytes,25,opt,name=approvalEscrowTransactionBody,proto3,oneof"`
}

type Transaction_MultiSignatureTransactionBody struct {
	MultiSignatureTransactionBody *MultiSignatureTransactionBody `protobuf:"bytes,26,opt,name=multiSignatureTransactionBody,proto3,oneof"`
}

type Transaction_FeeVoteCommitTransactionBody struct {
	FeeVoteCommitTransactionBody *FeeVoteCommitTransactionBody `protobuf:"bytes,27,opt,name=feeVoteCommitTransactionBody,proto3,oneof"`
}

type Transaction_FeeVoteRevealTransactionBody struct {
	FeeVoteRevealTransactionBody *FeeVoteRevealTransactionBody `protobuf:"bytes,28,opt,name=feeVoteRevealTransactionBody,proto3,oneof"`
}

type Transaction_LiquidPaymentTransactionBody struct {
	LiquidPaymentTransactionBody *LiquidPaymentTransactionBody `protobuf:"bytes,29,opt,name=liquidPaymentTransactionBody,proto3,oneof"`
}

type Transaction_LiquidPaymentStopTransactionBody struct {
	LiquidPaymentStopTransactionBody *LiquidPaymentStopTransactionBody `protobuf:"bytes,30,opt,name=liquidPaymentStopTransactionBody,proto3,oneof"`
}

func (*Transaction_EmptyTransactionBody) isTransaction_TransactionBody() {}

func (*Transaction_SendMoneyTransactionBody) isTransaction_TransactionBody() {}

func (*Transaction_NodeRegistrationTransactionBody) isTransaction_TransactionBody() {}

func (*Transaction_UpdateNodeRegistrationTransactionBody) isTransaction_TransactionBody() {}

func (*Transaction_RemoveNodeRegistrationTransactionBody) isTransaction_TransactionBody() {}

func (*Transaction_ClaimNodeRegistrationTransactionBody) isTransaction_TransactionBody() {}

func (*Transaction_SetupAccountDatasetTransactionBody) isTransaction_TransactionBody() {}

func (*Transaction_RemoveAccountDatasetTransactionBody) isTransaction_TransactionBody() {}

func (*Transaction_ApprovalEscrowTransactionBody) isTransaction_TransactionBody() {}

func (*Transaction_MultiSignatureTransactionBody) isTransaction_TransactionBody() {}

func (*Transaction_FeeVoteCommitTransactionBody) isTransaction_TransactionBody() {}

func (*Transaction_FeeVoteRevealTransactionBody) isTransaction_TransactionBody() {}

func (*Transaction_LiquidPaymentTransactionBody) isTransaction_TransactionBody() {}

func (*Transaction_LiquidPaymentStopTransactionBody) isTransaction_TransactionBody() {}

type EmptyTransactionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyTransactionBody) Reset() {
	*x = EmptyTransactionBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_transaction_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyTransactionBody) ProtoMessage() {}

func (x *EmptyTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_model_transaction_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyTransactionBody.ProtoReflect.Descriptor instead.
func (*EmptyTransactionBody) Descriptor() ([]byte, []int) {
	return file_model_transaction_proto_rawDescGZIP(), []int{1}
}

type SendMoneyTransactionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount int64 `protobuf:"varint,1,opt,name=Amount,proto3" json:"Amount,omitempty"`
}

func (x *SendMoneyTransactionBody) Reset() {
	*x = SendMoneyTransactionBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_transaction_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMoneyTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMoneyTransactionBody) ProtoMessage() {}

func (x *SendMoneyTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_model_transaction_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMoneyTransactionBody.ProtoReflect.Descriptor instead.
func (*SendMoneyTransactionBody) Descriptor() ([]byte, []int) {
	return file_model_transaction_proto_rawDescGZIP(), []int{2}
}

func (x *SendMoneyTransactionBody) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type NodeRegistrationTransactionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodePublicKey  []byte `protobuf:"bytes,1,opt,name=NodePublicKey,proto3" json:"NodePublicKey,omitempty"`
	AccountAddress []byte `protobuf:"bytes,2,opt,name=AccountAddress,proto3" json:"AccountAddress,omitempty"`
	// Funds to be locked to register the node
	LockedBalance int64 `protobuf:"varint,3,opt,name=LockedBalance,proto3" json:"LockedBalance,omitempty"`
	// Proof of ownership (message + signature)
	Poown *ProofOfOwnership `protobuf:"bytes,4,opt,name=Poown,proto3" json:"Poown,omitempty"`
}

func (x *NodeRegistrationTransactionBody) Reset() {
	*x = NodeRegistrationTransactionBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_transaction_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeRegistrationTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRegistrationTransactionBody) ProtoMessage() {}

func (x *NodeRegistrationTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_model_transaction_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRegistrationTransactionBody.ProtoReflect.Descriptor instead.
func (*NodeRegistrationTransactionBody) Descriptor() ([]byte, []int) {
	return file_model_transaction_proto_rawDescGZIP(), []int{3}
}

func (x *NodeRegistrationTransactionBody) GetNodePublicKey() []byte {
	if x != nil {
		return x.NodePublicKey
	}
	return nil
}

func (x *NodeRegistrationTransactionBody) GetAccountAddress() []byte {
	if x != nil {
		return x.AccountAddress
	}
	return nil
}

func (x *NodeRegistrationTransactionBody) GetLockedBalance() int64 {
	if x != nil {
		return x.LockedBalance
	}
	return 0
}

func (x *NodeRegistrationTransactionBody) GetPoown() *ProofOfOwnership {
	if x != nil {
		return x.Poown
	}
	return nil
}

type UpdateNodeRegistrationTransactionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodePublicKey []byte `protobuf:"bytes,1,opt,name=NodePublicKey,proto3" json:"NodePublicKey,omitempty"`
	// Funds to be locked to register the node
	LockedBalance int64 `protobuf:"varint,2,opt,name=LockedBalance,proto3" json:"LockedBalance,omitempty"`
	// Proof of ownership (message + signature)
	Poown *ProofOfOwnership `protobuf:"bytes,3,opt,name=Poown,proto3" json:"Poown,omitempty"`
}

func (x *UpdateNodeRegistrationTransactionBody) Reset() {
	*x = UpdateNodeRegistrationTransactionBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_transaction_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeRegistrationTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeRegistrationTransactionBody) ProtoMessage() {}

func (x *UpdateNodeRegistrationTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_model_transaction_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeRegistrationTransactionBody.ProtoReflect.Descriptor instead.
func (*UpdateNodeRegistrationTransactionBody) Descriptor() ([]byte, []int) {
	return file_model_transaction_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateNodeRegistrationTransactionBody) GetNodePublicKey() []byte {
	if x != nil {
		return x.NodePublicKey
	}
	return nil
}

func (x *UpdateNodeRegistrationTransactionBody) GetLockedBalance() int64 {
	if x != nil {
		return x.LockedBalance
	}
	return 0
}

func (x *UpdateNodeRegistrationTransactionBody) GetPoown() *ProofOfOwnership {
	if x != nil {
		return x.Poown
	}
	return nil
}

type RemoveNodeRegistrationTransactionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodePublicKey []byte `protobuf:"bytes,1,opt,name=NodePublicKey,proto3" json:"NodePublicKey,omitempty"`
}

func (x *RemoveNodeRegistrationTransactionBody) Reset() {
	*x = RemoveNodeRegistrationTransactionBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_transaction_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveNodeRegistrationTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveNodeRegistrationTransactionBody) ProtoMessage() {}

func (x *RemoveNodeRegistrationTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_model_transaction_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveNodeRegistrationTransactionBody.ProtoReflect.Descriptor instead.
func (*RemoveNodeRegistrationTransactionBody) Descriptor() ([]byte, []int) {
	return file_model_transaction_proto_rawDescGZIP(), []int{5}
}

func (x *RemoveNodeRegistrationTransactionBody) GetNodePublicKey() []byte {
	if x != nil {
		return x.NodePublicKey
	}
	return nil
}

type ClaimNodeRegistrationTransactionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodePublicKey []byte `protobuf:"bytes,1,opt,name=NodePublicKey,proto3" json:"NodePublicKey,omitempty"`
	// Proof of ownership (message + signature)
	Poown *ProofOfOwnership `protobuf:"bytes,2,opt,name=Poown,proto3" json:"Poown,omitempty"`
}

func (x *ClaimNodeRegistrationTransactionBody) Reset() {
	*x = ClaimNodeRegistrationTransactionBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_transaction_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimNodeRegistrationTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimNodeRegistrationTransactionBody) ProtoMessage() {}

func (x *ClaimNodeRegistrationTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_model_transaction_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimNodeRegistrationTransactionBody.ProtoReflect.Descriptor instead.
func (*ClaimNodeRegistrationTransactionBody) Descriptor() ([]byte, []int) {
	return file_model_transaction_proto_rawDescGZIP(), []int{6}
}

func (x *ClaimNodeRegistrationTransactionBody) GetNodePublicKey() []byte {
	if x != nil {
		return x.NodePublicKey
	}
	return nil
}

func (x *ClaimNodeRegistrationTransactionBody) GetPoown() *ProofOfOwnership {
	if x != nil {
		return x.Poown
	}
	return nil
}

type SetupAccountDatasetTransactionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Property name
	Property string `protobuf:"bytes,1,opt,name=Property,proto3" json:"Property,omitempty"`
	// Value of property
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"` // How long Dataset will active in second
}

func (x *SetupAccountDatasetTransactionBody) Reset() {
	*x = SetupAccountDatasetTransactionBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_transaction_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetupAccountDatasetTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupAccountDatasetTransactionBody) ProtoMessage() {}

func (x *SetupAccountDatasetTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_model_transaction_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupAccountDatasetTransactionBody.ProtoReflect.Descriptor instead.
func (*SetupAccountDatasetTransactionBody) Descriptor() ([]byte, []int) {
	return file_model_transaction_proto_rawDescGZIP(), []int{7}
}

func (x *SetupAccountDatasetTransactionBody) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

func (x *SetupAccountDatasetTransactionBody) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type RemoveAccountDatasetTransactionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Property name
	Property string `protobuf:"bytes,1,opt,name=Property,proto3" json:"Property,omitempty"`
	// Value of property
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *RemoveAccountDatasetTransactionBody) Reset() {
	*x = RemoveAccountDatasetTransactionBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_transaction_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveAccountDatasetTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAccountDatasetTransactionBody) ProtoMessage() {}

func (x *RemoveAccountDatasetTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_model_transaction_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAccountDatasetTransactionBody.ProtoReflect.Descriptor instead.
func (*RemoveAccountDatasetTransactionBody) Descriptor() ([]byte, []int) {
	return file_model_transaction_proto_rawDescGZIP(), []int{8}
}

func (x *RemoveAccountDatasetTransactionBody) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

func (x *RemoveAccountDatasetTransactionBody) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ApprovalEscrowTransactionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Approval      EscrowApproval `protobuf:"varint,1,opt,name=Approval,proto3,enum=model.EscrowApproval" json:"Approval,omitempty"`
	TransactionID int64          `protobuf:"varint,2,opt,name=TransactionID,proto3" json:"TransactionID,omitempty"`
}

func (x *ApprovalEscrowTransactionBody) Reset() {
	*x = ApprovalEscrowTransactionBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_transaction_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalEscrowTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalEscrowTransactionBody) ProtoMessage() {}

func (x *ApprovalEscrowTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_model_transaction_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalEscrowTransactionBody.ProtoReflect.Descriptor instead.
func (*ApprovalEscrowTransactionBody) Descriptor() ([]byte, []int) {
	return file_model_transaction_proto_rawDescGZIP(), []int{9}
}

func (x *ApprovalEscrowTransactionBody) GetApproval() EscrowApproval {
	if x != nil {
		return x.Approval
	}
	return EscrowApproval_Approve
}

func (x *ApprovalEscrowTransactionBody) GetTransactionID() int64 {
	if x != nil {
		return x.TransactionID
	}
	return 0
}

type MultiSignatureTransactionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MultiSignatureInfo represent the information of the multisig-address
	MultiSignatureInfo *MultiSignatureInfo `protobuf:"bytes,1,opt,name=MultiSignatureInfo,proto3" json:"MultiSignatureInfo,omitempty"`
	// Unsigned transaction bytes that will be executed once the transaction is valid
	UnsignedTransactionBytes []byte `protobuf:"bytes,2,opt,name=UnsignedTransactionBytes,proto3" json:"UnsignedTransactionBytes,omitempty"`
	// List of participantAddress-participantSignature with its tx hash
	SignatureInfo *SignatureInfo `protobuf:"bytes,3,opt,name=SignatureInfo,proto3" json:"SignatureInfo,omitempty"`
}

func (x *MultiSignatureTransactionBody) Reset() {
	*x = MultiSignatureTransactionBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_transaction_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSignatureTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSignatureTransactionBody) ProtoMessage() {}

func (x *MultiSignatureTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_model_transaction_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSignatureTransactionBody.ProtoReflect.Descriptor instead.
func (*MultiSignatureTransactionBody) Descriptor() ([]byte, []int) {
	return file_model_transaction_proto_rawDescGZIP(), []int{10}
}

func (x *MultiSignatureTransactionBody) GetMultiSignatureInfo() *MultiSignatureInfo {
	if x != nil {
		return x.MultiSignatureInfo
	}
	return nil
}

func (x *MultiSignatureTransactionBody) GetUnsignedTransactionBytes() []byte {
	if x != nil {
		return x.UnsignedTransactionBytes
	}
	return nil
}

func (x *MultiSignatureTransactionBody) GetSignatureInfo() *SignatureInfo {
	if x != nil {
		return x.SignatureInfo
	}
	return nil
}

type FeeVoteCommitTransactionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VoteHash the hash of fee vote object
	VoteHash []byte `protobuf:"bytes,1,opt,name=VoteHash,proto3" json:"VoteHash,omitempty"`
}

func (x *FeeVoteCommitTransactionBody) Reset() {
	*x = FeeVoteCommitTransactionBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_transaction_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeVoteCommitTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeVoteCommitTransactionBody) ProtoMessage() {}

func (x *FeeVoteCommitTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_model_transaction_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeVoteCommitTransactionBody.ProtoReflect.Descriptor instead.
func (*FeeVoteCommitTransactionBody) Descriptor() ([]byte, []int) {
	return file_model_transaction_proto_rawDescGZIP(), []int{11}
}

func (x *FeeVoteCommitTransactionBody) GetVoteHash() []byte {
	if x != nil {
		return x.VoteHash
	}
	return nil
}

type FeeVoteRevealTransactionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeeVoteInfo    *FeeVoteInfo `protobuf:"bytes,1,opt,name=FeeVoteInfo,proto3" json:"FeeVoteInfo,omitempty"`
	VoterSignature []byte       `protobuf:"bytes,2,opt,name=VoterSignature,proto3" json:"VoterSignature,omitempty"`
}

func (x *FeeVoteRevealTransactionBody) Reset() {
	*x = FeeVoteRevealTransactionBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_transaction_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeVoteRevealTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeVoteRevealTransactionBody) ProtoMessage() {}

func (x *FeeVoteRevealTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_model_transaction_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeVoteRevealTransactionBody.ProtoReflect.Descriptor instead.
func (*FeeVoteRevealTransactionBody) Descriptor() ([]byte, []int) {
	return file_model_transaction_proto_rawDescGZIP(), []int{12}
}

func (x *FeeVoteRevealTransactionBody) GetFeeVoteInfo() *FeeVoteInfo {
	if x != nil {
		return x.FeeVoteInfo
	}
	return nil
}

func (x *FeeVoteRevealTransactionBody) GetVoterSignature() []byte {
	if x != nil {
		return x.VoterSignature
	}
	return nil
}

type LiquidPaymentTransactionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount int64 `protobuf:"varint,1,opt,name=Amount,proto3" json:"Amount,omitempty"`
	// CompleteMinutes indicates how many minutes is required before the liquid payment is completed
	CompleteMinutes uint64 `protobuf:"varint,2,opt,name=CompleteMinutes,proto3" json:"CompleteMinutes,omitempty"`
}

func (x *LiquidPaymentTransactionBody) Reset() {
	*x = LiquidPaymentTransactionBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_transaction_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidPaymentTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidPaymentTransactionBody) ProtoMessage() {}

func (x *LiquidPaymentTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_model_transaction_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidPaymentTransactionBody.ProtoReflect.Descriptor instead.
func (*LiquidPaymentTransactionBody) Descriptor() ([]byte, []int) {
	return file_model_transaction_proto_rawDescGZIP(), []int{13}
}

func (x *LiquidPaymentTransactionBody) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *LiquidPaymentTransactionBody) GetCompleteMinutes() uint64 {
	if x != nil {
		return x.CompleteMinutes
	}
	return 0
}

type LiquidPaymentStopTransactionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionID int64 `protobuf:"varint,1,opt,name=TransactionID,proto3" json:"TransactionID,omitempty"`
}

func (x *LiquidPaymentStopTransactionBody) Reset() {
	*x = LiquidPaymentStopTransactionBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_transaction_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidPaymentStopTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidPaymentStopTransactionBody) ProtoMessage() {}

func (x *LiquidPaymentStopTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_model_transaction_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidPaymentStopTransactionBody.ProtoReflect.Descriptor instead.
func (*LiquidPaymentStopTransactionBody) Descriptor() ([]byte, []int) {
	return file_model_transaction_proto_rawDescGZIP(), []int{14}
}

func (x *LiquidPaymentStopTransactionBody) GetTransactionID() int64 {
	if x != nil {
		return x.TransactionID
	}
	return 0
}

// GetTransactionRequest return model.Transaction
type GetTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fetch Transaction by its ID
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetTransactionRequest) Reset() {
	*x = GetTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_transaction_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionRequest) ProtoMessage() {}

func (x *GetTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_model_transaction_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionRequest) Descriptor() ([]byte, []int) {
	return file_model_transaction_proto_rawDescGZIP(), []int{15}
}

func (x *GetTransactionRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

// GetTransactions return GetTransactionsResponse
type GetTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountAddress  []byte      `protobuf:"bytes,1,opt,name=AccountAddress,proto3" json:"AccountAddress,omitempty"`
	Height          uint32      `protobuf:"varint,2,opt,name=Height,proto3" json:"Height,omitempty"`
	TimestampStart  int64       `protobuf:"varint,3,opt,name=TimestampStart,proto3" json:"TimestampStart,omitempty"`
	TimestampEnd    int64       `protobuf:"varint,4,opt,name=TimestampEnd,proto3" json:"TimestampEnd,omitempty"`
	TransactionType uint32      `protobuf:"varint,5,opt,name=TransactionType,proto3" json:"TransactionType,omitempty"`
	Pagination      *Pagination `protobuf:"bytes,6,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	FromBlock       uint32      `protobuf:"varint,7,opt,name=FromBlock,proto3" json:"FromBlock,omitempty"`
	ToBlock         uint32      `protobuf:"varint,8,opt,name=ToBlock,proto3" json:"ToBlock,omitempty"`
}

func (x *GetTransactionsRequest) Reset() {
	*x = GetTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_transaction_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionsRequest) ProtoMessage() {}

func (x *GetTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_model_transaction_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionsRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_model_transaction_proto_rawDescGZIP(), []int{16}
}

func (x *GetTransactionsRequest) GetAccountAddress() []byte {
	if x != nil {
		return x.AccountAddress
	}
	return nil
}

func (x *GetTransactionsRequest) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetTransactionsRequest) GetTimestampStart() int64 {
	if x != nil {
		return x.TimestampStart
	}
	return 0
}

func (x *GetTransactionsRequest) GetTimestampEnd() int64 {
	if x != nil {
		return x.TimestampEnd
	}
	return 0
}

func (x *GetTransactionsRequest) GetTransactionType() uint32 {
	if x != nil {
		return x.TransactionType
	}
	return 0
}

func (x *GetTransactionsRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetTransactionsRequest) GetFromBlock() uint32 {
	if x != nil {
		return x.FromBlock
	}
	return 0
}

func (x *GetTransactionsRequest) GetToBlock() uint32 {
	if x != nil {
		return x.ToBlock
	}
	return 0
}

type GetTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of transactions in total
	Total uint64 `protobuf:"varint,1,opt,name=Total,proto3" json:"Total,omitempty"`
	// Transaction transactions returned
	Transactions []*Transaction `protobuf:"bytes,2,rep,name=Transactions,proto3" json:"Transactions,omitempty"`
}

func (x *GetTransactionsResponse) Reset() {
	*x = GetTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_transaction_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionsResponse) ProtoMessage() {}

func (x *GetTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_model_transaction_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionsResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_model_transaction_proto_rawDescGZIP(), []int{17}
}

func (x *GetTransactionsResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetTransactionsResponse) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

// PostTransactionRequest return PostTransactionResponse
type PostTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signed transaction bytes
	TransactionBytes []byte `protobuf:"bytes,1,opt,name=TransactionBytes,proto3" json:"TransactionBytes,omitempty"`
}

func (x *PostTransactionRequest) Reset() {
	*x = PostTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_transaction_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostTransactionRequest) ProtoMessage() {}

func (x *PostTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_model_transaction_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostTransactionRequest.ProtoReflect.Descriptor instead.
func (*PostTransactionRequest) Descriptor() ([]byte, []int) {
	return file_model_transaction_proto_rawDescGZIP(), []int{18}
}

func (x *PostTransactionRequest) GetTransactionBytes() []byte {
	if x != nil {
		return x.TransactionBytes
	}
	return nil
}

type PostTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *Transaction `protobuf:"bytes,1,opt,name=Transaction,proto3" json:"Transaction,omitempty"`
}

func (x *PostTransactionResponse) Reset() {
	*x = PostTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_transaction_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostTransactionResponse) ProtoMessage() {}

func (x *PostTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_model_transaction_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostTransactionResponse.ProtoReflect.Descriptor instead.
func (*PostTransactionResponse) Descriptor() ([]byte, []int) {
	return file_model_transaction_proto_rawDescGZIP(), []int{19}
}

func (x *PostTransactionResponse) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

// SendTransactionRequest a model request of send a transaction in p2pCommunication service
type SendTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionBytes []byte `protobuf:"bytes,1,opt,name=TransactionBytes,proto3" json:"TransactionBytes,omitempty"`
	ChainType        int32  `protobuf:"varint,2,opt,name=ChainType,proto3" json:"ChainType,omitempty"`
	SenderPublicKey  []byte `protobuf:"bytes,3,opt,name=SenderPublicKey,proto3" json:"SenderPublicKey,omitempty"`
}

func (x *SendTransactionRequest) Reset() {
	*x = SendTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_transaction_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTransactionRequest) ProtoMessage() {}

func (x *SendTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_model_transaction_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTransactionRequest.ProtoReflect.Descriptor instead.
func (*SendTransactionRequest) Descriptor() ([]byte, []int) {
	return file_model_transaction_proto_rawDescGZIP(), []int{20}
}

func (x *SendTransactionRequest) GetTransactionBytes() []byte {
	if x != nil {
		return x.TransactionBytes
	}
	return nil
}

func (x *SendTransactionRequest) GetChainType() int32 {
	if x != nil {
		return x.ChainType
	}
	return 0
}

func (x *SendTransactionRequest) GetSenderPublicKey() []byte {
	if x != nil {
		return x.SenderPublicKey
	}
	return nil
}

// SendTransactionResponse a model response of send a transaction in p2pCommunication service
type SendTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Receipt *Receipt `protobuf:"bytes,1,opt,name=Receipt,proto3" json:"Receipt,omitempty"`
}

func (x *SendTransactionResponse) Reset() {
	*x = SendTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_transaction_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTransactionResponse) ProtoMessage() {}

func (x *SendTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_model_transaction_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTransactionResponse.ProtoReflect.Descriptor instead.
func (*SendTransactionResponse) Descriptor() ([]byte, []int) {
	return file_model_transaction_proto_rawDescGZIP(), []int{21}
}

func (x *SendTransactionResponse) GetReceipt() *Receipt {
	if x != nil {
		return x.Receipt
	}
	return nil
}

// RequestBlockTransactionsRequest a model request of requesting transaction based on ID transactions
type RequestBlockTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionIDs []int64 `protobuf:"varint,1,rep,packed,name=TransactionIDs,proto3" json:"TransactionIDs,omitempty"`
	ChainType      int32   `protobuf:"varint,2,opt,name=ChainType,proto3" json:"ChainType,omitempty"`
	BlockID        int64   `protobuf:"varint,3,opt,name=BlockID,proto3" json:"BlockID,omitempty"`
}

func (x *RequestBlockTransactionsRequest) Reset() {
	*x = RequestBlockTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_transaction_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestBlockTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestBlockTransactionsRequest) ProtoMessage() {}

func (x *RequestBlockTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_model_transaction_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestBlockTransactionsRequest.ProtoReflect.Descriptor instead.
func (*RequestBlockTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_model_transaction_proto_rawDescGZIP(), []int{22}
}

func (x *RequestBlockTransactionsRequest) GetTransactionIDs() []int64 {
	if x != nil {
		return x.TransactionIDs
	}
	return nil
}

func (x *RequestBlockTransactionsRequest) GetChainType() int32 {
	if x != nil {
		return x.ChainType
	}
	return 0
}

func (x *RequestBlockTransactionsRequest) GetBlockID() int64 {
	if x != nil {
		return x.BlockID
	}
	return 0
}

// SendBlockTransactionsRequest a model request for sending block's transactions
type SendBlockTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainType         int32    `protobuf:"varint,1,opt,name=ChainType,proto3" json:"ChainType,omitempty"`
	TransactionsBytes [][]byte `protobuf:"bytes,2,rep,name=TransactionsBytes,proto3" json:"TransactionsBytes,omitempty"`
	SenderPublicKey   []byte   `protobuf:"bytes,3,opt,name=SenderPublicKey,proto3" json:"SenderPublicKey,omitempty"`
}

func (x *SendBlockTransactionsRequest) Reset() {
	*x = SendBlockTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_transaction_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendBlockTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendBlockTransactionsRequest) ProtoMessage() {}

func (x *SendBlockTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_model_transaction_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendBlockTransactionsRequest.ProtoReflect.Descriptor instead.
func (*SendBlockTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_model_transaction_proto_rawDescGZIP(), []int{23}
}

func (x *SendBlockTransactionsRequest) GetChainType() int32 {
	if x != nil {
		return x.ChainType
	}
	return 0
}

func (x *SendBlockTransactionsRequest) GetTransactionsBytes() [][]byte {
	if x != nil {
		return x.TransactionsBytes
	}
	return nil
}

func (x *SendBlockTransactionsRequest) GetSenderPublicKey() []byte {
	if x != nil {
		return x.SenderPublicKey
	}
	return nil
}

// SendBlockTransactionsResponse a model response of a process sending block's transactions
type SendBlockTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Receipts []*Receipt `protobuf:"bytes,1,rep,name=Receipts,proto3" json:"Receipts,omitempty"`
}

func (x *SendBlockTransactionsResponse) Reset() {
	*x = SendBlockTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_transaction_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendBlockTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendBlockTransactionsResponse) ProtoMessage() {}

func (x *SendBlockTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_model_transaction_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendBlockTransactionsResponse.ProtoReflect.Descriptor instead.
func (*SendBlockTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_model_transaction_proto_rawDescGZIP(), []int{24}
}

func (x *SendBlockTransactionsResponse) GetReceipts() []*Receipt {
	if x != nil {
		return x.Receipts
	}
	return nil
}

// GetTransactionMinimumFeeRequest a model request for getting minimum fee required to post the transaction
type GetTransactionMinimumFeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionBytes []byte `protobuf:"bytes,1,opt,name=TransactionBytes,proto3" json:"TransactionBytes,omitempty"`
}

func (x *GetTransactionMinimumFeeRequest) Reset() {
	*x = GetTransactionMinimumFeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_transaction_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionMinimumFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionMinimumFeeRequest) ProtoMessage() {}

func (x *GetTransactionMinimumFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_model_transaction_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionMinimumFeeRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionMinimumFeeRequest) Descriptor() ([]byte, []int) {
	return file_model_transaction_proto_rawDescGZIP(), []int{25}
}

func (x *GetTransactionMinimumFeeRequest) GetTransactionBytes() []byte {
	if x != nil {
		return x.TransactionBytes
	}
	return nil
}

// GetTransactionMinimumFeeResponse a model response for GetTransactionMinimumFeeRequest, indicates the minimum fee for provided tx
type GetTransactionMinimumFeeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fee int64 `protobuf:"varint,1,opt,name=Fee,proto3" json:"Fee,omitempty"`
}

func (x *GetTransactionMinimumFeeResponse) Reset() {
	*x = GetTransactionMinimumFeeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_transaction_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionMinimumFeeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionMinimumFeeResponse) ProtoMessage() {}

func (x *GetTransactionMinimumFeeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_model_transaction_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionMinimumFeeResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionMinimumFeeResponse) Descriptor() ([]byte, []int) {
	return file_model_transaction_proto_rawDescGZIP(), []int{26}
}

func (x *GetTransactionMinimumFeeResponse) GetFee() int64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

var File_model_transaction_proto protoreflect.FileDescriptor

var file_model_transaction_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x1a, 0x1c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2f, 0x65, 0x73, 0x63, 0x72, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2f, 0x66, 0x65, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe2,
	0x11, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x07,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30,
	0x01, 0x52, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x03, 0x46, 0x65,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x03, 0x46, 0x65, 0x65,
	0x12, 0x20, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x34, 0x0a, 0x15,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x32, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64,
	0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x73, 0x69, 0x67, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x51, 0x0a, 0x14, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x14, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x5d, 0x0a, 0x18, 0x73,
	0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00,
	0x52, 0x18, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x72, 0x0a, 0x1f, 0x6e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x1f, 0x6e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x84,
	0x01, 0x0a, 0x25, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x25,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x84, 0x01, 0x0a, 0x25, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x25, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x81, 0x01, 0x0a,
	0x24, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x24, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x7b, 0x0a, 0x22, 0x73, 0x65, 0x74, 0x75, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x22, 0x73, 0x65, 0x74, 0x75, 0x70,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x7e, 0x0a,
	0x23, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x6f, 0x64, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x23, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x6c, 0x0a,
	0x1d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x45, 0x73, 0x63, 0x72, 0x6f, 0x77, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x45, 0x73, 0x63, 0x72, 0x6f, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x1d, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x45, 0x73, 0x63, 0x72, 0x6f, 0x77, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x6c, 0x0a, 0x1d, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x1d, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x69, 0x0a, 0x1c, 0x66, 0x65, 0x65,
	0x56, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x65, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x1c, 0x66, 0x65, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x69, 0x0a, 0x1c, 0x66, 0x65, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x76, 0x65, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x6f, 0x64, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x46, 0x65, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48,
	0x00, 0x52, 0x1c, 0x66, 0x65, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x69, 0x0a, 0x1c, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x1c, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x75, 0x0a, 0x20, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52,
	0x20, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x6f, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x25, 0x0a, 0x06, 0x45, 0x73, 0x63, 0x72, 0x6f, 0x77, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x73, 0x63, 0x72, 0x6f, 0x77, 0x52, 0x06,
	0x45, 0x73, 0x63, 0x72, 0x6f, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x11, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6f, 0x64, 0x79, 0x22, 0x16, 0x0a, 0x14, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x36, 0x0a, 0x18, 0x53,
	0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1a, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x1f, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x4e, 0x6f, 0x64, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a,
	0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x0d, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x2d, 0x0a, 0x05, 0x50, 0x6f, 0x6f, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x05, 0x50, 0x6f, 0x6f, 0x77, 0x6e, 0x22, 0xa6,
	0x01, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x28,
	0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0d, 0x4c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x50, 0x6f, 0x6f, 0x77,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x52, 0x05, 0x50, 0x6f, 0x6f, 0x77, 0x6e, 0x22, 0x4d, 0x0a, 0x25, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x24, 0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x7b, 0x0a, 0x24, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x24,
	0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x50, 0x6f, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x4f, 0x66, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x05, 0x50, 0x6f,
	0x6f, 0x77, 0x6e, 0x22, 0x56, 0x0a, 0x22, 0x53, 0x65, 0x74, 0x75, 0x70, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x57, 0x0a, 0x23, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x7c, 0x0a, 0x1d, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x45, 0x73, 0x63, 0x72, 0x6f, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x31, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x45, 0x73, 0x63, 0x72, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x08,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x02, 0x30, 0x01, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x22, 0xe2, 0x01, 0x0a, 0x1d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x49, 0x0a, 0x12, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x3a, 0x0a, 0x18, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x18, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3a, 0x0a, 0x1c, 0x46, 0x65, 0x65, 0x56, 0x6f,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x6f, 0x74, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x56, 0x6f, 0x74, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x22, 0x7c, 0x0a, 0x1c, 0x46, 0x65, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x76, 0x65, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x34, 0x0a, 0x0b, 0x46, 0x65, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x46, 0x65, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x46, 0x65,
	0x65, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x56, 0x6f, 0x74,
	0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0e, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0x68, 0x0a, 0x1c, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x1a, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a,
	0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0f, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x22, 0x4c, 0x0a, 0x20, 0x4c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x70,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x28, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x2b, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02,
	0x30, 0x01, 0x52, 0x02, 0x49, 0x44, 0x22, 0xc1, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x2a, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x26, 0x0a,
	0x0c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x45, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x45, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x31, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x18, 0x0a, 0x07, 0x54, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x54, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x6b, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x36, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x44, 0x0a, 0x16, 0x50, 0x6f, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x4f, 0x0a,
	0x17, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8c,
	0x01, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x53, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x43, 0x0a,
	0x17, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x07, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x07,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30,
	0x01, 0x52, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x22, 0x94, 0x01, 0x0a, 0x1c, 0x53,
	0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x22, 0x4b, 0x0a, 0x1d, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x52, 0x08, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x22, 0x4d,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x38, 0x0a,
	0x20, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x03, 0x46, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02,
	0x30, 0x01, 0x52, 0x03, 0x46, 0x65, 0x65, 0x2a, 0xeb, 0x03, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x21,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x82, 0x02, 0x12, 0x26, 0x0a, 0x21, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x82, 0x04, 0x12, 0x25, 0x0a, 0x20,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x82, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x1f, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x83, 0x02, 0x12, 0x1d, 0x0a,
	0x19, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x45, 0x73, 0x63, 0x72, 0x6f, 0x77, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x4c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1c, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x86, 0x02, 0x12, 0x24, 0x0a, 0x20,
	0x46, 0x65, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x56, 0x6f, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x07, 0x12, 0x21, 0x0a, 0x1c, 0x46, 0x65, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x76,
	0x65, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x87, 0x02, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x6f, 0x6f, 0x62, 0x63, 0x2f, 0x7a, 0x6f, 0x6f, 0x62, 0x63, 0x2d,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_model_transaction_proto_rawDescOnce sync.Once
	file_model_transaction_proto_rawDescData = file_model_transaction_proto_rawDesc
)

func file_model_transaction_proto_rawDescGZIP() []byte {
	file_model_transaction_proto_rawDescOnce.Do(func() {
		file_model_transaction_proto_rawDescData = protoimpl.X.CompressGZIP(file_model_transaction_proto_rawDescData)
	})
	return file_model_transaction_proto_rawDescData
}

var file_model_transaction_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_model_transaction_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_model_transaction_proto_goTypes = []interface{}{
	(TransactionType)(0),                          // 0: model.TransactionType
	(*Transaction)(nil),                           // 1: model.Transaction
	(*EmptyTransactionBody)(nil),                  // 2: model.EmptyTransactionBody
	(*SendMoneyTransactionBody)(nil),              // 3: model.SendMoneyTransactionBody
	(*NodeRegistrationTransactionBody)(nil),       // 4: model.NodeRegistrationTransactionBody
	(*UpdateNodeRegistrationTransactionBody)(nil), // 5: model.UpdateNodeRegistrationTransactionBody
	(*RemoveNodeRegistrationTransactionBody)(nil), // 6: model.RemoveNodeRegistrationTransactionBody
	(*ClaimNodeRegistrationTransactionBody)(nil),  // 7: model.ClaimNodeRegistrationTransactionBody
	(*SetupAccountDatasetTransactionBody)(nil),    // 8: model.SetupAccountDatasetTransactionBody
	(*RemoveAccountDatasetTransactionBody)(nil),   // 9: model.RemoveAccountDatasetTransactionBody
	(*ApprovalEscrowTransactionBody)(nil),         // 10: model.ApprovalEscrowTransactionBody
	(*MultiSignatureTransactionBody)(nil),         // 11: model.MultiSignatureTransactionBody
	(*FeeVoteCommitTransactionBody)(nil),          // 12: model.FeeVoteCommitTransactionBody
	(*FeeVoteRevealTransactionBody)(nil),          // 13: model.FeeVoteRevealTransactionBody
	(*LiquidPaymentTransactionBody)(nil),          // 14: model.LiquidPaymentTransactionBody
	(*LiquidPaymentStopTransactionBody)(nil),      // 15: model.LiquidPaymentStopTransactionBody
	(*GetTransactionRequest)(nil),                 // 16: model.GetTransactionRequest
	(*GetTransactionsRequest)(nil),                // 17: model.GetTransactionsRequest
	(*GetTransactionsResponse)(nil),               // 18: model.GetTransactionsResponse
	(*PostTransactionRequest)(nil),                // 19: model.PostTransactionRequest
	(*PostTransactionResponse)(nil),               // 20: model.PostTransactionResponse
	(*SendTransactionRequest)(nil),                // 21: model.SendTransactionRequest
	(*SendTransactionResponse)(nil),               // 22: model.SendTransactionResponse
	(*RequestBlockTransactionsRequest)(nil),       // 23: model.RequestBlockTransactionsRequest
	(*SendBlockTransactionsRequest)(nil),          // 24: model.SendBlockTransactionsRequest
	(*SendBlockTransactionsResponse)(nil),         // 25: model.SendBlockTransactionsResponse
	(*GetTransactionMinimumFeeRequest)(nil),       // 26: model.GetTransactionMinimumFeeRequest
	(*GetTransactionMinimumFeeResponse)(nil),      // 27: model.GetTransactionMinimumFeeResponse
	(*Escrow)(nil),                                // 28: model.Escrow
	(*ProofOfOwnership)(nil),                      // 29: model.ProofOfOwnership
	(EscrowApproval)(0),                           // 30: model.EscrowApproval
	(*MultiSignatureInfo)(nil),                    // 31: model.MultiSignatureInfo
	(*SignatureInfo)(nil),                         // 32: model.SignatureInfo
	(*FeeVoteInfo)(nil),                           // 33: model.FeeVoteInfo
	(*Pagination)(nil),                            // 34: model.Pagination
	(*Receipt)(nil),                               // 35: model.Receipt
}
var file_model_transaction_proto_depIdxs = []int32{
	2,  // 0: model.Transaction.emptyTransactionBody:type_name -> model.EmptyTransactionBody
	3,  // 1: model.Transaction.sendMoneyTransactionBody:type_name -> model.SendMoneyTransactionBody
	4,  // 2: model.Transaction.nodeRegistrationTransactionBody:type_name -> model.NodeRegistrationTransactionBody
	5,  // 3: model.Transaction.updateNodeRegistrationTransactionBody:type_name -> model.UpdateNodeRegistrationTransactionBody
	6,  // 4: model.Transaction.removeNodeRegistrationTransactionBody:type_name -> model.RemoveNodeRegistrationTransactionBody
	7,  // 5: model.Transaction.claimNodeRegistrationTransactionBody:type_name -> model.ClaimNodeRegistrationTransactionBody
	8,  // 6: model.Transaction.setupAccountDatasetTransactionBody:type_name -> model.SetupAccountDatasetTransactionBody
	9,  // 7: model.Transaction.removeAccountDatasetTransactionBody:type_name -> model.RemoveAccountDatasetTransactionBody
	10, // 8: model.Transaction.approvalEscrowTransactionBody:type_name -> model.ApprovalEscrowTransactionBody
	11, // 9: model.Transaction.multiSignatureTransactionBody:type_name -> model.MultiSignatureTransactionBody
	12, // 10: model.Transaction.feeVoteCommitTransactionBody:type_name -> model.FeeVoteCommitTransactionBody
	13, // 11: model.Transaction.feeVoteRevealTransactionBody:type_name -> model.FeeVoteRevealTransactionBody
	14, // 12: model.Transaction.liquidPaymentTransactionBody:type_name -> model.LiquidPaymentTransactionBody
	15, // 13: model.Transaction.liquidPaymentStopTransactionBody:type_name -> model.LiquidPaymentStopTransactionBody
	28, // 14: model.Transaction.Escrow:type_name -> model.Escrow
	29, // 15: model.NodeRegistrationTransactionBody.Poown:type_name -> model.ProofOfOwnership
	29, // 16: model.UpdateNodeRegistrationTransactionBody.Poown:type_name -> model.ProofOfOwnership
	29, // 17: model.ClaimNodeRegistrationTransactionBody.Poown:type_name -> model.ProofOfOwnership
	30, // 18: model.ApprovalEscrowTransactionBody.Approval:type_name -> model.EscrowApproval
	31, // 19: model.MultiSignatureTransactionBody.MultiSignatureInfo:type_name -> model.MultiSignatureInfo
	32, // 20: model.MultiSignatureTransactionBody.SignatureInfo:type_name -> model.SignatureInfo
	33, // 21: model.FeeVoteRevealTransactionBody.FeeVoteInfo:type_name -> model.FeeVoteInfo
	34, // 22: model.GetTransactionsRequest.Pagination:type_name -> model.Pagination
	1,  // 23: model.GetTransactionsResponse.Transactions:type_name -> model.Transaction
	1,  // 24: model.PostTransactionResponse.Transaction:type_name -> model.Transaction
	35, // 25: model.SendTransactionResponse.Receipt:type_name -> model.Receipt
	35, // 26: model.SendBlockTransactionsResponse.Receipts:type_name -> model.Receipt
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_model_transaction_proto_init() }
func file_model_transaction_proto_init() {
	if File_model_transaction_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_model_transaction_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_transaction_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyTransactionBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_transaction_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMoneyTransactionBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_transaction_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeRegistrationTransactionBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_transaction_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeRegistrationTransactionBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_transaction_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveNodeRegistrationTransactionBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_transaction_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimNodeRegistrationTransactionBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_transaction_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetupAccountDatasetTransactionBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_transaction_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveAccountDatasetTransactionBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_transaction_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalEscrowTransactionBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_transaction_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiSignatureTransactionBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_transaction_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeVoteCommitTransactionBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_transaction_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeVoteRevealTransactionBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_transaction_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidPaymentTransactionBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_transaction_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidPaymentStopTransactionBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_transaction_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_transaction_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_transaction_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_transaction_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_transaction_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_transaction_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_transaction_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_transaction_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestBlockTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_transaction_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendBlockTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_transaction_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendBlockTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_transaction_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionMinimumFeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_transaction_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionMinimumFeeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_model_transaction_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Transaction_EmptyTransactionBody)(nil),
		(*Transaction_SendMoneyTransactionBody)(nil),
		(*Transaction_NodeRegistrationTransactionBody)(nil),
		(*Transaction_UpdateNodeRegistrationTransactionBody)(nil),
		(*Transaction_RemoveNodeRegistrationTransactionBody)(nil),
		(*Transaction_ClaimNodeRegistrationTransactionBody)(nil),
		(*Transaction_SetupAccountDatasetTransactionBody)(nil),
		(*Transaction_RemoveAccountDatasetTransactionBody)(nil),
		(*Transaction_ApprovalEscrowTransactionBody)(nil),
		(*Transaction_MultiSignatureTransactionBody)(nil),
		(*Transaction_FeeVoteCommitTransactionBody)(nil),
		(*Transaction_FeeVoteRevealTransactionBody)(nil),
		(*Transaction_LiquidPaymentTransactionBody)(nil),
		(*Transaction_LiquidPaymentStopTransactionBody)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_model_transaction_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_model_transaction_proto_goTypes,
		DependencyIndexes: file_model_transaction_proto_depIdxs,
		EnumInfos:         file_model_transaction_proto_enumTypes,
		MessageInfos:      file_model_transaction_proto_msgTypes,
	}.Build()
	File_model_transaction_proto = out.File
	file_model_transaction_proto_rawDesc = nil
	file_model_transaction_proto_goTypes = nil
	file_model_transaction_proto_depIdxs = nil
}
