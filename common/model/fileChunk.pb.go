// Code generated by protoc-gen-go. DO NOT EDIT.
// source: model/fileChunk.proto

package model

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// FileChunk represent the data structure stored in the database for a snapshot chunk
type FileChunk struct {
	// ChunkHash hash of the chunk (if only one chunk, this is = FullFileHash)
	ChunkHash []byte `protobuf:"bytes,1,opt,name=ChunkHash,proto3" json:"ChunkHash,omitempty"`
	// MegablockID ref to relative Megablock
	MegablockID int64 `protobuf:"varint,2,opt,name=MegablockID,proto3" json:"MegablockID,omitempty"`
	// ChunkIndex index of snapshot chunk
	ChunkIndex uint32 `protobuf:"varint,3,opt,name=ChunkIndex,proto3" json:"ChunkIndex,omitempty"`
	// PreviousChunkHash hash of the previous chunk (for validation and to ease
	// the download process) Note: this will make it possible to download and
	// rebuild the whole snapshot from its last chunk only
	PreviousChunkHash []byte `protobuf:"bytes,4,opt,name=PreviousChunkHash,proto3" json:"PreviousChunkHash,omitempty"`
	// SpineBlockHeight spine block height which the chunk refers to
	SpineBlockHeight uint32 `protobuf:"varint,5,opt,name=SpineBlockHeight,proto3" json:"SpineBlockHeight,omitempty"`
	// Number indicating chaintype (at the moment it can only be mainchain, but in future could be others)
	ChainType            int32    `protobuf:"varint,6,opt,name=ChainType,proto3" json:"ChainType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileChunk) Reset()         { *m = FileChunk{} }
func (m *FileChunk) String() string { return proto.CompactTextString(m) }
func (*FileChunk) ProtoMessage()    {}
func (*FileChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_11e08c1cae690ace, []int{0}
}

func (m *FileChunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileChunk.Unmarshal(m, b)
}
func (m *FileChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileChunk.Marshal(b, m, deterministic)
}
func (m *FileChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileChunk.Merge(m, src)
}
func (m *FileChunk) XXX_Size() int {
	return xxx_messageInfo_FileChunk.Size(m)
}
func (m *FileChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_FileChunk.DiscardUnknown(m)
}

var xxx_messageInfo_FileChunk proto.InternalMessageInfo

func (m *FileChunk) GetChunkHash() []byte {
	if m != nil {
		return m.ChunkHash
	}
	return nil
}

func (m *FileChunk) GetMegablockID() int64 {
	if m != nil {
		return m.MegablockID
	}
	return 0
}

func (m *FileChunk) GetChunkIndex() uint32 {
	if m != nil {
		return m.ChunkIndex
	}
	return 0
}

func (m *FileChunk) GetPreviousChunkHash() []byte {
	if m != nil {
		return m.PreviousChunkHash
	}
	return nil
}

func (m *FileChunk) GetSpineBlockHeight() uint32 {
	if m != nil {
		return m.SpineBlockHeight
	}
	return 0
}

func (m *FileChunk) GetChainType() int32 {
	if m != nil {
		return m.ChainType
	}
	return 0
}

func init() {
	proto.RegisterType((*FileChunk)(nil), "model.FileChunk")
}

func init() { proto.RegisterFile("model/fileChunk.proto", fileDescriptor_11e08c1cae690ace) }

var fileDescriptor_11e08c1cae690ace = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcd, 0xcd, 0x4f, 0x49,
	0xcd, 0xd1, 0x4f, 0xcb, 0xcc, 0x49, 0x75, 0xce, 0x28, 0xcd, 0xcb, 0xd6, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x62, 0x05, 0x0b, 0x2b, 0x3d, 0x67, 0xe4, 0xe2, 0x74, 0x83, 0x49, 0x09, 0xc9, 0x70,
	0x71, 0x82, 0x19, 0x1e, 0x89, 0xc5, 0x19, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x3c, 0x41, 0x08, 0x01,
	0x21, 0x15, 0x2e, 0x6e, 0xdf, 0xd4, 0xf4, 0xc4, 0xa4, 0x9c, 0xfc, 0xe4, 0x6c, 0x4f, 0x17, 0x09,
	0x26, 0x05, 0x46, 0x0d, 0x66, 0x27, 0x26, 0x03, 0xc6, 0x20, 0x64, 0x61, 0x21, 0x39, 0x2e, 0x2e,
	0xb0, 0x16, 0xcf, 0xbc, 0x94, 0xd4, 0x0a, 0x09, 0x66, 0x05, 0x46, 0x0d, 0xde, 0x20, 0x24, 0x11,
	0x21, 0x1d, 0x2e, 0xc1, 0x80, 0xa2, 0xd4, 0xb2, 0xcc, 0xfc, 0xd2, 0x62, 0x84, 0x5d, 0x2c, 0x60,
	0xbb, 0x30, 0x25, 0x84, 0xb4, 0xb8, 0x04, 0x82, 0x0b, 0x32, 0xf3, 0x52, 0x9d, 0x40, 0xa6, 0x7b,
	0xa4, 0x66, 0xa6, 0x67, 0x94, 0x48, 0xb0, 0x82, 0xcd, 0xc4, 0x10, 0x87, 0xb8, 0x3e, 0x31, 0x33,
	0x2f, 0xa4, 0xb2, 0x20, 0x55, 0x82, 0x4d, 0x81, 0x51, 0x83, 0x35, 0x08, 0x21, 0xe0, 0xa4, 0x15,
	0xa5, 0x91, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x5f, 0x95, 0x9f, 0x9f,
	0x94, 0x0c, 0x21, 0x75, 0x93, 0xf3, 0x8b, 0x52, 0xf5, 0x93, 0xf3, 0x73, 0x73, 0xf3, 0xf3, 0xf4,
	0xc1, 0xa1, 0x92, 0xc4, 0x06, 0x0e, 0x23, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x57, 0x23,
	0x42, 0xe1, 0x3c, 0x01, 0x00, 0x00,
}
