// Code generated by protoc-gen-go. DO NOT EDIT.
// source: model/snapshot.proto

package model

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// SnapshotFileInfo model to pass data between snapshot and megablock interfaces
type SnapshotFileInfo struct {
	SnapshotFileHash     []byte        `protobuf:"bytes,1,opt,name=SnapshotFileHash,proto3" json:"SnapshotFileHash,omitempty"`
	PrevFileChunkHash    []byte        `protobuf:"bytes,2,opt,name=PrevFileChunkHash,proto3" json:"PrevFileChunkHash,omitempty"`
	MainHeight           uint32        `protobuf:"varint,3,opt,name=MainHeight,proto3" json:"MainHeight,omitempty"`
	SpineHeight          uint32        `protobuf:"varint,4,opt,name=SpineHeight,proto3" json:"SpineHeight,omitempty"`
	ChainType            int32         `protobuf:"varint,5,opt,name=ChainType,proto3" json:"ChainType,omitempty"`
	MegablockType        MegablockType `protobuf:"varint,6,opt,name=MegablockType,proto3,enum=model.MegablockType" json:"MegablockType,omitempty"`
	FileChunksHashes     [][]byte      `protobuf:"bytes,7,rep,name=FileChunksHashes,proto3" json:"FileChunksHashes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SnapshotFileInfo) Reset()         { *m = SnapshotFileInfo{} }
func (m *SnapshotFileInfo) String() string { return proto.CompactTextString(m) }
func (*SnapshotFileInfo) ProtoMessage()    {}
func (*SnapshotFileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d9d8140a8c06fc6, []int{0}
}

func (m *SnapshotFileInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnapshotFileInfo.Unmarshal(m, b)
}
func (m *SnapshotFileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnapshotFileInfo.Marshal(b, m, deterministic)
}
func (m *SnapshotFileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotFileInfo.Merge(m, src)
}
func (m *SnapshotFileInfo) XXX_Size() int {
	return xxx_messageInfo_SnapshotFileInfo.Size(m)
}
func (m *SnapshotFileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotFileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotFileInfo proto.InternalMessageInfo

func (m *SnapshotFileInfo) GetSnapshotFileHash() []byte {
	if m != nil {
		return m.SnapshotFileHash
	}
	return nil
}

func (m *SnapshotFileInfo) GetPrevFileChunkHash() []byte {
	if m != nil {
		return m.PrevFileChunkHash
	}
	return nil
}

func (m *SnapshotFileInfo) GetMainHeight() uint32 {
	if m != nil {
		return m.MainHeight
	}
	return 0
}

func (m *SnapshotFileInfo) GetSpineHeight() uint32 {
	if m != nil {
		return m.SpineHeight
	}
	return 0
}

func (m *SnapshotFileInfo) GetChainType() int32 {
	if m != nil {
		return m.ChainType
	}
	return 0
}

func (m *SnapshotFileInfo) GetMegablockType() MegablockType {
	if m != nil {
		return m.MegablockType
	}
	return MegablockType_Snapshot
}

func (m *SnapshotFileInfo) GetFileChunksHashes() [][]byte {
	if m != nil {
		return m.FileChunksHashes
	}
	return nil
}

func init() {
	proto.RegisterType((*SnapshotFileInfo)(nil), "model.SnapshotFileInfo")
}

func init() { proto.RegisterFile("model/snapshot.proto", fileDescriptor_5d9d8140a8c06fc6) }

var fileDescriptor_5d9d8140a8c06fc6 = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x51, 0x4b, 0xf3, 0x30,
	0x14, 0x86, 0xc9, 0xf6, 0x75, 0x1f, 0x46, 0x27, 0x1a, 0x26, 0x14, 0x11, 0x09, 0x5e, 0x85, 0xa1,
	0x2d, 0xe8, 0x9d, 0x97, 0x0e, 0x64, 0x5e, 0x0c, 0xa4, 0xf3, 0xca, 0xbb, 0x34, 0x1e, 0x9b, 0xb0,
	0x26, 0xa7, 0x34, 0x9d, 0xa0, 0xbf, 0xcb, 0x1f, 0x28, 0x4d, 0xa7, 0xae, 0xee, 0x26, 0x90, 0xe7,
	0x7d, 0x42, 0xce, 0x7b, 0xe8, 0xc4, 0xe2, 0x0b, 0x94, 0xa9, 0x77, 0xb2, 0xf2, 0x1a, 0x9b, 0xa4,
	0xaa, 0xb1, 0x41, 0x16, 0x05, 0x7a, 0x7a, 0xd2, 0x85, 0x16, 0x0a, 0x99, 0x97, 0xa8, 0x56, 0x5d,
	0x7a, 0xf1, 0x39, 0xa0, 0x47, 0xcb, 0xcd, 0x83, 0x7b, 0x53, 0xc2, 0x83, 0x7b, 0x45, 0x36, 0xed,
	0xb3, 0xb9, 0xf4, 0x3a, 0x26, 0x9c, 0x88, 0x83, 0x6c, 0x87, 0xb3, 0x4b, 0x7a, 0xfc, 0x58, 0xc3,
	0x5b, 0x7b, 0x9f, 0xe9, 0xb5, 0x5b, 0x05, 0x79, 0x10, 0xe4, 0xdd, 0x80, 0x9d, 0x53, 0xba, 0x90,
	0xc6, 0xcd, 0xc1, 0x14, 0xba, 0x89, 0x87, 0x9c, 0x88, 0x71, 0xb6, 0x45, 0x18, 0xa7, 0xfb, 0xcb,
	0xca, 0x38, 0xd8, 0x08, 0xff, 0x82, 0xb0, 0x8d, 0xd8, 0x19, 0xdd, 0x9b, 0x69, 0x69, 0xdc, 0xd3,
	0x7b, 0x05, 0x71, 0xc4, 0x89, 0x88, 0xb2, 0x5f, 0xc0, 0x6e, 0xe9, 0x78, 0xf1, 0xdd, 0x30, 0x18,
	0x23, 0x4e, 0xc4, 0xe1, 0xf5, 0x24, 0x09, 0xed, 0x93, 0x5e, 0x96, 0xf5, 0xd5, 0xb6, 0xf5, 0xcf,
	0xb0, 0xbe, 0x9d, 0x16, 0x7c, 0xfc, 0x9f, 0x0f, 0xdb, 0xd6, 0x7f, 0xf9, 0xdd, 0xf4, 0x59, 0x14,
	0xa6, 0xd1, 0xeb, 0x3c, 0x51, 0x68, 0xd3, 0x0f, 0xc4, 0x5c, 0x75, 0xe7, 0x95, 0xc2, 0x1a, 0x52,
	0x85, 0xd6, 0xa2, 0x4b, 0xc3, 0xa7, 0xf9, 0x28, 0x6c, 0xfa, 0xe6, 0x2b, 0x00, 0x00, 0xff, 0xff,
	0x1d, 0x95, 0xb3, 0xee, 0x9f, 0x01, 0x00, 0x00,
}
