// Code generated by protoc-gen-go. DO NOT EDIT.
// source: model/signature.proto

package model

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SignatureType int32

const (
	// in bytes: []byte{0,0,0,0}, using Ed25519 signature algorithm
	SignatureType_DefaultSignature SignatureType = 0
	// in bytes: []byte{1,0,0,0}, bitcoin uses a specific Koblitz curve secp256k1
	// Koblitz curves are a type of Elliptic Curve Digital Signature Algorithm
	SignatureType_BitcoinSignature SignatureType = 1
	// in bytes: []byte{2,0,0,0} for multisig validation purpose only
	SignatureType_MultisigSignature SignatureType = 2
	// in bytes: []byte{3,0,0,0} for estonian eID validation purpose only
	SignatureType_EstoniaEidSignature SignatureType = 3
	// in bytes: []byte{4,0,0,0}, eth uses ECDSA signing algorithm
	SignatureType_EthereumSignature SignatureType = 4
)

var SignatureType_name = map[int32]string{
	0: "DefaultSignature",
	1: "BitcoinSignature",
	2: "MultisigSignature",
	3: "EstoniaEidSignature",
	4: "EthereumSignature",
}

var SignatureType_value = map[string]int32{
	"DefaultSignature":    0,
	"BitcoinSignature":    1,
	"MultisigSignature":   2,
	"EstoniaEidSignature": 3,
	"EthereumSignature":   4,
}

func (x SignatureType) String() string {
	return proto.EnumName(SignatureType_name, int32(x))
}

func (SignatureType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a69ee5fbbdd37ed5, []int{0}
}

// BitcoinPrivateKeyBytesLength represent the length of private key that can use
type PrivateKeyBytesLength int32

const (
	PrivateKeyBytesLength_PrivateKeyInvalid PrivateKeyBytesLength = 0
	PrivateKeyBytesLength_PrivateKey256Bits PrivateKeyBytesLength = 32
	PrivateKeyBytesLength_PrivateKey384Bits PrivateKeyBytesLength = 48
	PrivateKeyBytesLength_PrivateKey512Bits PrivateKeyBytesLength = 64
)

var PrivateKeyBytesLength_name = map[int32]string{
	0:  "PrivateKeyInvalid",
	32: "PrivateKey256Bits",
	48: "PrivateKey384Bits",
	64: "PrivateKey512Bits",
}

var PrivateKeyBytesLength_value = map[string]int32{
	"PrivateKeyInvalid": 0,
	"PrivateKey256Bits": 32,
	"PrivateKey384Bits": 48,
	"PrivateKey512Bits": 64,
}

func (x PrivateKeyBytesLength) String() string {
	return proto.EnumName(PrivateKeyBytesLength_name, int32(x))
}

func (PrivateKeyBytesLength) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a69ee5fbbdd37ed5, []int{1}
}

// BitcoinPublicKeyFormat represent the option of the Bitcoin public key format that can use
//  public key format : https://bitcoin.org/en/wallets-guide#public-key-formats
type BitcoinPublicKeyFormat int32

const (
	BitcoinPublicKeyFormat_PublicKeyFormatUncompressed BitcoinPublicKeyFormat = 0
	BitcoinPublicKeyFormat_PublicKeyFormatCompressed   BitcoinPublicKeyFormat = 1
)

var BitcoinPublicKeyFormat_name = map[int32]string{
	0: "PublicKeyFormatUncompressed",
	1: "PublicKeyFormatCompressed",
}

var BitcoinPublicKeyFormat_value = map[string]int32{
	"PublicKeyFormatUncompressed": 0,
	"PublicKeyFormatCompressed":   1,
}

func (x BitcoinPublicKeyFormat) String() string {
	return proto.EnumName(BitcoinPublicKeyFormat_name, int32(x))
}

func (BitcoinPublicKeyFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a69ee5fbbdd37ed5, []int{2}
}

func init() {
	proto.RegisterEnum("model.SignatureType", SignatureType_name, SignatureType_value)
	proto.RegisterEnum("model.PrivateKeyBytesLength", PrivateKeyBytesLength_name, PrivateKeyBytesLength_value)
	proto.RegisterEnum("model.BitcoinPublicKeyFormat", BitcoinPublicKeyFormat_name, BitcoinPublicKeyFormat_value)
}

func init() {
	proto.RegisterFile("model/signature.proto", fileDescriptor_a69ee5fbbdd37ed5)
}

var fileDescriptor_a69ee5fbbdd37ed5 = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0xd1, 0x4f, 0x4b, 0xf3, 0x40,
	0x10, 0x06, 0xf0, 0xf6, 0x7d, 0xd5, 0xc3, 0x82, 0x10, 0xa3, 0x55, 0x44, 0x44, 0x8f, 0x12, 0xb0,
	0xd1, 0xd6, 0x8a, 0x47, 0x89, 0x56, 0x90, 0x2a, 0x14, 0x54, 0x10, 0x6f, 0x9b, 0xed, 0x98, 0x0e,
	0x64, 0x77, 0xca, 0xee, 0x6c, 0x21, 0x1e, 0xfd, 0xe4, 0x92, 0xf8, 0x67, 0x49, 0x2f, 0x7b, 0xf8,
	0x3d, 0x0f, 0x2c, 0x33, 0x23, 0x7a, 0x9a, 0x66, 0x50, 0xa6, 0x0e, 0x0b, 0x23, 0xd9, 0x5b, 0xe8,
	0x2f, 0x2c, 0x31, 0xc5, 0xeb, 0x0d, 0x27, 0x9f, 0x5d, 0xb1, 0xf9, 0xf4, 0x1b, 0x3d, 0x57, 0x0b,
	0x88, 0x77, 0x44, 0x74, 0x0b, 0xef, 0xd2, 0x97, 0xfc, 0xe7, 0x51, 0xa7, 0xd6, 0x0c, 0x59, 0x11,
	0x9a, 0xa0, 0xdd, 0xb8, 0x27, 0xb6, 0x1e, 0x7d, 0xc9, 0xe8, 0xb0, 0x08, 0xfc, 0x2f, 0xde, 0x13,
	0xdb, 0x63, 0xc7, 0x64, 0x50, 0x8e, 0x71, 0x16, 0x82, 0xff, 0x75, 0x7f, 0xcc, 0x73, 0xb0, 0xe0,
	0x75, 0xe0, 0xb5, 0xc4, 0x89, 0xde, 0xd4, 0xe2, 0x52, 0x32, 0x4c, 0xa0, 0xca, 0x2a, 0x06, 0xf7,
	0x00, 0xa6, 0xe0, 0x79, 0xdd, 0x0f, 0xc1, 0xbd, 0x59, 0xca, 0x12, 0x67, 0x51, 0xa7, 0xcd, 0x83,
	0xd1, 0x65, 0x86, 0xec, 0xa2, 0xe3, 0x36, 0x0f, 0xaf, 0x2e, 0x1a, 0x3e, 0x6b, 0xf3, 0xe8, 0x7c,
	0xd0, 0xf0, 0x75, 0xf2, 0x2a, 0x76, 0x7f, 0x26, 0x9a, 0xfa, 0xbc, 0x44, 0x35, 0x81, 0xea, 0x8e,
	0xac, 0x96, 0x1c, 0x1f, 0x89, 0x83, 0x15, 0x7a, 0x31, 0x8a, 0xf4, 0xc2, 0x82, 0x73, 0x50, 0xff,
	0x7f, 0x28, 0xf6, 0x57, 0x0a, 0x37, 0x21, 0xee, 0x66, 0xc9, 0xdb, 0x49, 0x81, 0x3c, 0xf7, 0x79,
	0x5f, 0x91, 0x4e, 0x3f, 0x88, 0x72, 0xf5, 0xfd, 0x9e, 0x2a, 0xb2, 0x90, 0x2a, 0xd2, 0x9a, 0x4c,
	0xda, 0xec, 0x3f, 0xdf, 0x68, 0xae, 0x31, 0xfc, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x52, 0x4f, 0x49,
	0xf9, 0xa6, 0x01, 0x00, 0x00,
}
