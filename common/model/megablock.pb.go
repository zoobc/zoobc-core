// Code generated by protoc-gen-go. DO NOT EDIT.
// source: model/megablock.proto

package model

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Megablock represent the megablock data structure stored in the database
type Megablock struct {
	// FullSnapshotHash hash of the full (completed) shapshot
	FullSnapshotHash []byte `protobuf:"bytes,1,opt,name=FullSnapshotHash,proto3" json:"FullSnapshotHash,omitempty"`
	// ChunksCount number of chunks in this megablock
	ChunksCount uint32 `protobuf:"varint,2,opt,name=ChunksCount,proto3" json:"ChunksCount,omitempty"`
	// SpineBlockHeight spine block height that wil reference this megablock (in its payload)
	SpineBlockHeight uint32 `protobuf:"varint,3,opt,name=SpineBlockHeight,proto3" json:"SpineBlockHeight,omitempty"`
	// MainBlockHeight main block height at which the snapshot has been taken (started to compute)
	// Note: this is not the last main height contained in the snapshot file, which shoul be
	// MainBlockHeight - const.MinRollvackBlocks
	MainBlockHeight uint32 `protobuf:"varint,4,opt,name=MainBlockHeight,proto3" json:"MainBlockHeight,omitempty"`
	// SnapshotChunk (when loaded), all snapshot chunks in this megablock
	SnapshotChunks       []*SnapshotChunk `protobuf:"bytes,5,rep,name=SnapshotChunks,proto3" json:"SnapshotChunks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Megablock) Reset()         { *m = Megablock{} }
func (m *Megablock) String() string { return proto.CompactTextString(m) }
func (*Megablock) ProtoMessage()    {}
func (*Megablock) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b40a10b4e757ea5, []int{0}
}

func (m *Megablock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Megablock.Unmarshal(m, b)
}
func (m *Megablock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Megablock.Marshal(b, m, deterministic)
}
func (m *Megablock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Megablock.Merge(m, src)
}
func (m *Megablock) XXX_Size() int {
	return xxx_messageInfo_Megablock.Size(m)
}
func (m *Megablock) XXX_DiscardUnknown() {
	xxx_messageInfo_Megablock.DiscardUnknown(m)
}

var xxx_messageInfo_Megablock proto.InternalMessageInfo

func (m *Megablock) GetFullSnapshotHash() []byte {
	if m != nil {
		return m.FullSnapshotHash
	}
	return nil
}

func (m *Megablock) GetChunksCount() uint32 {
	if m != nil {
		return m.ChunksCount
	}
	return 0
}

func (m *Megablock) GetSpineBlockHeight() uint32 {
	if m != nil {
		return m.SpineBlockHeight
	}
	return 0
}

func (m *Megablock) GetMainBlockHeight() uint32 {
	if m != nil {
		return m.MainBlockHeight
	}
	return 0
}

func (m *Megablock) GetSnapshotChunks() []*SnapshotChunk {
	if m != nil {
		return m.SnapshotChunks
	}
	return nil
}

func init() {
	proto.RegisterType((*Megablock)(nil), "model.Megablock")
}

func init() { proto.RegisterFile("model/megablock.proto", fileDescriptor_2b40a10b4e757ea5) }

var fileDescriptor_2b40a10b4e757ea5 = []byte{
	// 227 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcd, 0xcd, 0x4f, 0x49,
	0xcd, 0xd1, 0xcf, 0x4d, 0x4d, 0x4f, 0x4c, 0xca, 0xc9, 0x4f, 0xce, 0xd6, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x62, 0x05, 0x0b, 0x4b, 0x49, 0x42, 0x64, 0x8b, 0xf3, 0x12, 0x0b, 0x8a, 0x33, 0xf2,
	0x4b, 0x9c, 0x33, 0x4a, 0xf3, 0xa0, 0x2a, 0x94, 0xde, 0x32, 0x72, 0x71, 0xfa, 0xc2, 0x74, 0x09,
	0x69, 0x71, 0x09, 0xb8, 0x95, 0xe6, 0xe4, 0x04, 0x43, 0x15, 0x7a, 0x24, 0x16, 0x67, 0x48, 0x30,
	0x2a, 0x30, 0x6a, 0xf0, 0x04, 0x61, 0x88, 0x0b, 0x29, 0x70, 0x71, 0x83, 0x0d, 0x2a, 0x76, 0xce,
	0x2f, 0xcd, 0x2b, 0x91, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x0d, 0x42, 0x16, 0x02, 0x99, 0x16, 0x5c,
	0x90, 0x99, 0x97, 0xea, 0x04, 0x32, 0xdb, 0x23, 0x35, 0x33, 0x3d, 0xa3, 0x44, 0x82, 0x19, 0xac,
	0x0c, 0x43, 0x5c, 0x48, 0x83, 0x8b, 0xdf, 0x37, 0x31, 0x33, 0x0f, 0x59, 0x29, 0x0b, 0x58, 0x29,
	0xba, 0xb0, 0x90, 0x0d, 0x17, 0x5f, 0x30, 0xb2, 0x47, 0x8a, 0x25, 0x58, 0x15, 0x98, 0x35, 0xb8,
	0x8d, 0x44, 0xf4, 0xc0, 0xbe, 0xd4, 0x43, 0x91, 0x0c, 0x42, 0x53, 0xeb, 0xa4, 0x15, 0xa5, 0x91,
	0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x5f, 0x95, 0x9f, 0x9f, 0x94, 0x0c,
	0x21, 0x75, 0x93, 0xf3, 0x8b, 0x52, 0xf5, 0x93, 0xf3, 0x73, 0x73, 0xf3, 0xf3, 0xf4, 0xc1, 0x26,
	0x25, 0xb1, 0x81, 0x83, 0xc8, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xce, 0x9b, 0xa8, 0xda, 0x5d,
	0x01, 0x00, 0x00,
}
