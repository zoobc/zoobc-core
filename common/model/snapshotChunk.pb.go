// Code generated by protoc-gen-go. DO NOT EDIT.
// source: model/snapshotChunk.proto

package model

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// SnapthotChunk represent the data structure stored in the database for a snapshot chunk
type SnapshotChunk struct {
	// ChunkHash hash of the chunk (if only one chunk, this is = FullSnapshotHash)
	ChunkHash []byte `protobuf:"bytes,1,opt,name=ChunkHash,proto3" json:"ChunkHash,omitempty"`
	// ChunkIndex index of snapshot chunk
	ChunkIndex uint32 `protobuf:"varint,2,opt,name=ChunkIndex,proto3" json:"ChunkIndex,omitempty"`
	// PreviousChunkHash hash of the previous chunk (for validation and to ease
	// the download process) Note: this will make it possible to download and
	// rebuild the whole snapshot from its last chunk only
	PreviousChunkHash []byte `protobuf:"bytes,3,opt,name=PreviousChunkHash,proto3" json:"PreviousChunkHash,omitempty"`
	// SpineBlockHeight spine block height which the chunk refers to
	SpineBlockHeight     uint32   `protobuf:"varint,4,opt,name=SpineBlockHeight,proto3" json:"SpineBlockHeight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotChunk) Reset()         { *m = SnapshotChunk{} }
func (m *SnapshotChunk) String() string { return proto.CompactTextString(m) }
func (*SnapshotChunk) ProtoMessage()    {}
func (*SnapshotChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_43d2c3f4d8780e11, []int{0}
}

func (m *SnapshotChunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnapshotChunk.Unmarshal(m, b)
}
func (m *SnapshotChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnapshotChunk.Marshal(b, m, deterministic)
}
func (m *SnapshotChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotChunk.Merge(m, src)
}
func (m *SnapshotChunk) XXX_Size() int {
	return xxx_messageInfo_SnapshotChunk.Size(m)
}
func (m *SnapshotChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotChunk.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotChunk proto.InternalMessageInfo

func (m *SnapshotChunk) GetChunkHash() []byte {
	if m != nil {
		return m.ChunkHash
	}
	return nil
}

func (m *SnapshotChunk) GetChunkIndex() uint32 {
	if m != nil {
		return m.ChunkIndex
	}
	return 0
}

func (m *SnapshotChunk) GetPreviousChunkHash() []byte {
	if m != nil {
		return m.PreviousChunkHash
	}
	return nil
}

func (m *SnapshotChunk) GetSpineBlockHeight() uint32 {
	if m != nil {
		return m.SpineBlockHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*SnapshotChunk)(nil), "model.SnapshotChunk")
}

func init() { proto.RegisterFile("model/snapshotChunk.proto", fileDescriptor_43d2c3f4d8780e11) }

var fileDescriptor_43d2c3f4d8780e11 = []byte{
	// 189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcc, 0xcd, 0x4f, 0x49,
	0xcd, 0xd1, 0x2f, 0xce, 0x4b, 0x2c, 0x28, 0xce, 0xc8, 0x2f, 0x71, 0xce, 0x28, 0xcd, 0xcb, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x4b, 0x29, 0x2d, 0x67, 0xe4, 0xe2, 0x0d, 0x46,
	0x96, 0x16, 0x92, 0xe1, 0xe2, 0x04, 0x33, 0x3c, 0x12, 0x8b, 0x33, 0x24, 0x18, 0x15, 0x18, 0x35,
	0x78, 0x82, 0x10, 0x02, 0x42, 0x72, 0x5c, 0x5c, 0x60, 0x8e, 0x67, 0x5e, 0x4a, 0x6a, 0x85, 0x04,
	0x93, 0x02, 0xa3, 0x06, 0x6f, 0x10, 0x92, 0x88, 0x90, 0x0e, 0x97, 0x60, 0x40, 0x51, 0x6a, 0x59,
	0x66, 0x7e, 0x69, 0x31, 0xc2, 0x14, 0x66, 0xb0, 0x29, 0x98, 0x12, 0x42, 0x5a, 0x5c, 0x02, 0xc1,
	0x05, 0x99, 0x79, 0xa9, 0x4e, 0x39, 0xf9, 0xc9, 0xd9, 0x1e, 0xa9, 0x99, 0xe9, 0x19, 0x25, 0x12,
	0x2c, 0x60, 0x33, 0x31, 0xc4, 0x9d, 0xb4, 0xa2, 0x34, 0xd2, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4,
	0x92, 0xf3, 0x73, 0xf5, 0xab, 0xf2, 0xf3, 0x93, 0x92, 0x21, 0xa4, 0x6e, 0x72, 0x7e, 0x51, 0xaa,
	0x7e, 0x72, 0x7e, 0x6e, 0x6e, 0x7e, 0x9e, 0x3e, 0xd8, 0x57, 0x49, 0x6c, 0x60, 0x3f, 0x1a, 0x03,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x43, 0x30, 0x5f, 0x00, 0x01, 0x00, 0x00,
}
